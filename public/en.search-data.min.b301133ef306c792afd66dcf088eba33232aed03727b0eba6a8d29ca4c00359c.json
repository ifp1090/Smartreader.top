[{"id":0,"href":"/docs/example/Ch8.%E5%8D%A1%E7%89%87%E9%98%85%E8%AF%BB/%E4%BB%80%E4%B9%88%E6%98%AF%E5%8D%A1%E7%89%87/","title":"01.什么是卡片","section":"Ch8.卡片阅读","content":" 1 # 什么是卡片？\n在了解卡片之前不妨做一个游戏吧！\n每个人都能记住自己的电话号码，这看起来没什么奇怪的。可是，如果我说你不一定记的住你的电话号码，你相信吗？\n如果你不相信，请你跟着我的顺序做一遍，看看你是不是真的不一定记得住：）\n第一步，说出你的手机号码\n你会发现，你刚刚说出来的号码，可能遵循了类似格式：\nXXX-XXXX-XXXX XXXX-XXXX-XXX 也就是说，你可能不自主尝试将你的电话号码进行了“分组”，那么这时我们进行第二步：\n你能快速用一下“分组法”脱口而出你的电话号码吗？\nXX－XXXX－XX-XX 注意，你需要“脱口而出”哦！\n你会发现，相比较第一步的快速复述，这时你可能要停顿一下甚至还可能停顿几秒后才能说出你的电话号码。\n这是为什么？\n为什么我们可能复述超过1000次甚至10000次以上的手机号，只要稍微改一下复述方式，就大概率“失忆”了呢？\n答案很简单，看起来我们记忆的是自己的手机号，其实我们记忆的是几个≤4的“数字串”。\n这其实和我们大脑的记忆原理息息相关。\n首先我们看一下我们对11位号码的分组：\nXXX-XXXX-XXXX XXXX-XXXX-XXX 上述分组有什么特点呢？\n第一，分组的组数≤4\n不论我们按照3－4－4或者4－4－2的组合方式，我们将它进行分组的组数也≤4，也就是说，一个≤4的“组数”，我们大脑也可以比较轻松的记住它。\n反过来思考，假如我们的电话一共有27位，即便我们将它转成了这样的形式：\nXXX－XXXX－XXXX－XXXX－XXXX－XXXX－XXXX\n这样我们也无法轻松记住，依然要借助其他的工具来帮我们记忆，而一旦要借助第三方工具来记忆，又造成了大脑的行动负荷：我们每次都要打开第三方工具（这可能需要一连串的步骤，比如拿起手机 － 点击某个APP － 点击某个栏目或者搜索输入关键词 － 点击查询\u0026hellip;\u0026hellip;)，这一连串动作对大脑而言会比较复杂，所以很可能陷入行为瘫痪。\n第二，分组后的数字≤4\n我们将11位数字分组后，最终每个组呈现的是≤4的限额，相比一长串数字，我们的大脑更容易记住≤4的“数字组”。\n反过来思考，如果我们的电话号码保持11位不变，如果我们将其分成这样的形式：\nXXXXXX－XXXXX\n我们的大脑也无法轻松记住它们。\n所以，一旦我们将一个超过大脑记忆区间的数字用分组的方式，就能不依赖于任何第三方工具，仅仅通过自己的大脑就能快速回忆起来，而一旦快速回忆起来，就能灵活运用到我们需要它的地方。\n这就是我们大脑在记忆层面神奇的地方！\n这时候，我们把这个案例中的“电话号码”换成一本书，就能很容易明白，为什么我们读了很多书，但是好像记不住书中的知识了 —— 因为书中的字数已经远远超出了我们大脑所能快速记住并回忆的范畴！\n但是，我们刚刚说过，我们能记住自己的电话号码，并不是记忆的11位数字，而是3个组块。所以，对于一本书，我们要记住的也不是它的字数，而是我们自定义的“组块”。也就是说，如果我们将书中的文字根据某种方式进行“分组”最后成为了“知识组块”，那么我们就可以更容易的记住它们。\n那么，我们如何对一本书的知识进行“组块”呢？\n这就回到了我们开头所介绍的知识 —— 卡片。\n换句话说，类似于将11位电话号码进行分组一样，一旦分组后，我们就能将这个电话号码轻松用在各种地方 —— 注册、登记、交友、接收信息等等，换句话说，这些分组的数字被我们不断复用，产生价值。\n同样，我们也可以将一本书中的重点知识组合成卡片，这样我们去读一本书，就不再是读这些文字本身，而是将它们组合成一张又一张能够被我们复用的卡片。\n就能不断的运用这些卡片来帮助我们对知识进行更深入的理解与运用。\n那么，\n电话号码是11位，它也超出了我们大脑的记忆范畴，但我们依然是可以记住它的！因为我们将它进行了满足两个“≤4”的进分组。换句话说，我们将超过我们大脑记忆区间的知识，通过分组的方式变成了“知识组块”，这样就给我们带来了两大便利：\n第一，不用花太多力气就能记住并且也很容易回忆起来（想想你轻松复述11位的电话号码）\n第二，一旦记得住并且容易回忆，就能大幅度增加用上它的可能性（想想你可以轻松从大脑中回忆起11位的电话号码来给到谈得来的朋友）\n回到一本书的阅读，我们如何将书中的知识记住并运用呢？\n答案就是将书中的知识也进行“分组”，\n"},{"id":1,"href":"/docs/example/Ch5.%E6%8A%BD%E6%A0%B7%E9%98%85%E8%AF%BB/how-to-sample-reading-a-book/","title":"01.简单随机抽样","section":"Ch5.抽样阅读","content":" 如何对一本书进行简单随机抽样阅读？ # 1 # 为什么我们往往觉得买书容易看书难？一个容易忽视的细节就是书的厚度影响了我们的阅读决策，现在的书动不动都是10万字起步，当我想阅读一本书时，首先引入眼帘的是它的厚度，如果再叠加内容本身的阅读难度，大脑就会觉得书难读进而迟迟不愿再翻开它，或者像我一样，翻开的频率随着时间的推移而逐步减少直至降为零。\n如何破解这个难题？经济学家维尔弗雷多 · 帕累托（Vilfredo Pareto）给我们带来了灵感，他指出，在大多数情况下，80% 的结果往往由 20% 的原因引发 （所以也被称为80/20 规则）。80/20 规则在生活中比比皆是：对于许多企业来说， 80% 的收入来自 20% 的客户、80% 的业绩来自 20% 的员工；对于个人来说，80% 的深厚友谊关系往往来自 20% 的朋友、80%的成果往往来自20%的努力。所以，80/20 原则提醒我们，关键是要找出这20%的至关重要的少数并专注于此，就能产生更好的成就。\n将80/20原则运用到阅读层面不难发现，一本书的20%往往代表了80%的内容权重。这就意味着，对于任意一本书，无论它有多厚，我们只要找到其中1/5的精华去读，就能大大降低大脑对阅读的畏难感。\n（pic）\n那么，当我们拿到一本书后，如何确认那20%的权重呢？\n最简单的办法就是抽取一本书20%的章节，这称之为「简单随机抽样」：对于一本书不进行内容的解析判断，直接随机取样。\n在具体计算过程中，还要考虑书中每页的文字密度，使用过Word的同学都知道，决定一页文字多少取决于两个要素，行距和字号：行距越小、字号越小，每页能够显示的内容就越多，反之亦然。\n由于大多数书本的字号都在小四~五号字体之间，所以我们在随机抽样时将字号和行距形成的文字密度统一设定为1.1~1.6之间，那么一本书的核心章节就可以按如下公式进行计算：\n核心阅读章节 = 书本章节总数 × 20% × 系数（1.1~1.6）\n这里我们暂且将系数设为中位数1.3，所以就是：\n核心阅读章节 = 书本章节总数 × 20% × 1.3\n2 # 这里我们以《行为科学统计》这本书为示范进行简单随机抽样。\n1. 核心章节计算 # 打开《行为科学统计》的目录页，我们发现这本书一共有19章：\n我们将前面的公式代入：\n《行为科学统计》核心章节 = 书本章节总数(19) × 20% × 中位系数（1.3）\n= 19 × 20% × 1.3\n= 4.94\n≈ 5\n所以我们现在知道，如果我们要对《行为科学统计》全书的知识进行相对完整的理解，最低需要随机抽样 5 章。\n2. 随机抽样代入 # 我们打开统计网站 临床试验统计网 ，在首页点击标题栏 STATBOX：\n在 新窗口标题栏继续点击 随机化-抽样-简单随机抽样\n新弹出「在线简单随机抽样」页面，我们把最小编号、最大编号（《行为科学统计》的章节总数）、抽样个数（简单随机抽样的章节数量）填写（注意最后一步「随机种子」清空原始值留空），然后点击右上角的红色计算按钮。\n这样就弹出了随机抽样的章节：\n这时候，我们就翻开《行为科学统计》，着重阅读第2章、第7章、第10章、第15章以及第17章。不过这里需要留意，因为抽样结果具有随机性，所以如果我们在网站上进行第二次类似操作时，可能会出现不同的抽样章节。\n到这里我们发现，对于书本的简单随机抽样，我们只需要做到两步即可：\n根据全书的章节总数按照80/20原则进行随机抽样的章节数量计算。 将相关数据填入 临床试验统计网 ，得出首先阅读的章节。 3 # 到这里有的同学可能会问，这里的简单随机抽样结果具有极大的随机性，如果抽样出来的章节并非核心章节，这里的抽样还有什么意义？\n其实，如果我们拿到一本自己比较陌生的书，我们暂时没有有效的方法确认这本书的核心章节时，这时候通过简单随机抽样可以让自己尽快激活自己阅读行为，不至于一直认为一本书太厚、太难读而陷入阅读瘫痪的窘境。而一旦激活了阅读行为，后面介绍的相关抽样方法又能进一步调整自己先前随机抽样的判断，形成对全书更深刻的认知与理解。所以，简单随机抽样阅读看似简单，其实它是整个抽样阅读的基础。\nRef：\n《聪明的阅读者》\n"},{"id":2,"href":"/docs/example/","title":"Example Site","section":"Docs","content":" Introduction # Ferre hinnitibus erat accipitrem dixi Troiae tollens # Lorem markdownum, a quoque nutu est quodcumque mandasset veluti. Passim inportuna totidemque nympha fert; repetens pendent, poenarum guttura sed vacet non, mortali undas. Omnis pharetramque gramen portentificisque membris servatum novabis fallit de nubibus atque silvas mihi. Dixit repetitaque Quid; verrit longa; sententia mandat quascumque nescio solebat litore; noctes. Hostem haerentem circuit plenaque tamen.\nPedum ne indigenae finire invergens carpebat Velit posses summoque De fumos illa foret Est simul fameque tauri qua ad # Locum nullus nisi vomentes. Ab Persea sermone vela, miratur aratro; eandem Argolicas gener.\nMe sol # Nec dis certa fuit socer, Nonacria dies manet tacitaque sibi? Sucis est iactata Castrumque iudex, et iactato quoque terraeque es tandem et maternos vittis. Lumina litus bene poenamque animos callem ne tuas in leones illam dea cadunt genus, et pleno nunc in quod. Anumque crescentesque sanguinis progenies nuribus rustica tinguet. Pater omnes liquido creditis noctem.\nif (mirrored(icmp_dvd_pim, 3, smbMirroredHard) != lion(clickImportQueue, viralItunesBalancing, bankruptcy_file_pptp)) { file += ip_cybercrime_suffix; } if (runtimeSmartRom == netMarketingWord) { virusBalancingWin *= scriptPromptBespoke + raster(post_drive, windowsSli); cd = address_hertz_trojan; soap_ccd.pcbServerGigahertz(asp_hardware_isa, offlinePeopleware, nui); } else { megabyte.api = modem_flowchart - web + syntaxHalftoneAddress; } if (3 \u0026lt; mebibyteNetworkAnimated) { pharming_regular_error *= jsp_ribbon + algorithm * recycleMediaKindle( dvrSyntax, cdma); adf_sla *= hoverCropDrive; templateNtfs = -1 - vertical; } else { expressionCompressionVariable.bootMulti = white_eup_javascript( table_suffix); guidPpiPram.tracerouteLinux += rtfTerabyteQuicktime(1, managementRosetta(webcamActivex), 740874); } var virusTweetSsl = nullGigo; Trepident sitimque # Sentiet et ferali errorem fessam, coercet superbus, Ascaniumque in pennis mediis; dolor? Vidit imi Aeacon perfida propositos adde, tua Somni Fluctibus errante lustrat non.\nTamen inde, vos videt e flammis Scythica parantem rupisque pectora umbras. Haec ficta canistris repercusso simul ego aris Dixit! Esse Fama trepidare hunc crescendo vigor ululasse vertice exspatiantur celer tepidique petita aversata oculis iussa est me ferro.\n"},{"id":3,"href":"/docs/example/table-of-contents/with-toc/","title":"With ToC","section":"Table of Contents","content":" Caput vino delphine in tamen vias # Cognita laeva illo fracta # Lorem markdownum pavent auras, surgit nunc cingentibus libet Laomedonque que est. Pastor An arbor filia foedat, ne fugit aliter, per. Helicona illas et callida neptem est Oresitrophos caput, dentibus est venit. Tenet reddite famuli praesentem fortibus, quaeque vis foret si frondes gelidos gravidae circumtulit inpulit armenta nativum.\nTe at cruciabere vides rubentis manebo Maturuit in praetemptat ruborem ignara postquam habitasse Subitarum supplevit quoque fontesque venabula spretis modo Montis tot est mali quasque gravis Quinquennem domus arsit ipse Pellem turis pugnabant locavit Natus quaerere # Pectora et sine mulcere, coniuge dum tincta incurvae. Quis iam; est dextra Peneosque, metuis a verba, primo. Illa sed colloque suis: magno: gramen, aera excutiunt concipit.\nPhrygiae petendo suisque extimuit, super, pars quod audet! Turba negarem. Fuerat attonitus; et dextra retinet sidera ulnas undas instimulat vacuae generis? Agnus dabat et ignotis dextera, sic tibi pacis feriente at mora euhoeque comites hostem vestras Phineus. Vultuque sanguine dominoque metuit risi fama vergit summaque meus clarissimus artesque tinguebat successor nominis cervice caelicolae.\nLimitibus misere sit # Aurea non fata repertis praerupit feruntur simul, meae hosti lentaque citius levibus, cum sede dixit, Phaethon texta. Albentibus summos multifidasque iungitur loquendi an pectore, mihi ursaque omnia adfata, aeno parvumque in animi perlucentes. Epytus agis ait vixque clamat ornum adversam spondet, quid sceptra ipsum est. Reseret nec; saeva suo passu debentia linguam terga et aures et cervix de ubera. Coercet gelidumque manus, doluit volvitur induta?\nEnim sua # Iuvenilior filia inlustre templa quidem herbis permittat trahens huic. In cruribus proceres sole crescitque fata, quos quos; merui maris se non tamen in, mea.\nGermana aves pignus tecta # Mortalia rudibusque caelum cognosceret tantum aquis redito felicior texit, nec, aris parvo acre. Me parum contulerant multi tenentem, gratissime suis; vultum tu occupat deficeret corpora, sonum. E Actaea inplevit Phinea concepit nomenque potest sanguine captam nulla et, in duxisses campis non; mercede. Dicere cur Leucothoen obitum?\nPostibus mittam est nubibus principium pluma, exsecratur facta et. Iunge Mnemonidas pallamque pars; vere restitit alis flumina quae quoque, est ignara infestus Pyrrha. Di ducis terris maculatum At sede praemia manes nullaque!\n"},{"id":4,"href":"/docs/example/Ch8.%E5%8D%A1%E7%89%87%E9%98%85%E8%AF%BB/%E5%8D%A1%E7%89%87%E7%9A%84%E7%BB%93%E6%9E%84/","title":"02.卡片的基本格式","section":"Ch8.卡片阅读","content":"在输出卡片的过程中，一共有9种卡片可以输出，在具体展开输出之前，我们可以提炼一下卡片输出的基本结构：\n卡片结构 卡片内容 头 卡片标题 身 卡片内容 尾 卡片参考 + 卡片编码 示范卡\u0026hellip;..\n卡片的“头”（标题）\n在卡片头部可能包含要素：\n卡片标题（必选） 卡片数量（可选） 卡片标题就是对需要撰写卡片的一个概括关键词，它可以在撰写卡片之前写，也可以在卡片写完之后写。\n这里的卡片数量并不是是指截止你写这张卡片时一共输出的卡片总数（当然如果你愿意，也可以写），而是比如我们要写卡片时，发现一张卡片并不能写完我们想输出的内容，那么这时候我们可以将卡片分拆为2~3张，那么第一张卡片可以标记为1/2，第二张卡片可以标记为2/2。这时候我们看到这个标记，就知道这张卡片一共有两张，我目前看到的是第一张或者第二张。\n如果是电子版，可以在卡片标题下面写上卡片数量；如果是实体版，可以写在卡片标题的最右边方便识别。\n\u0026hellip;\u0026hellip;\n标题的撰写方法：\n电子版：可以用Markdown语法的#来表示； 手写版：可以借用Markdown语法，同样用#来表示，这样更便捷。 \u0026hellip;\u0026hellip;\n卡片的“身”（内容）\n卡片的“尾”（末段）\n所有卡片在最末端都统一写上两个要素：\n这张卡片内容的原始参考 书写这张卡片的精确时间点 卡片的原始参考有两类，第一类是我们所书写的卡片内容的来源，这类最为常见，比如我们正在阅读《聪明的阅读者》的卡片大法这一章，我们看到「基础卡」这个概念，那么我们可以写一张基础卡的术语卡：\n#术语卡 什么是基础卡？\n基础卡是阳志平老师推荐的卡片大法中的一种，它是指我们在读书时所产生的一些最基本、最普通想法时输出的卡片类型。基础卡的基本模块包括标题、内容、参考、编码四种，相比较另外8种卡片，基础卡使用最为灵活、受到的规则限定也最少。\nRef：《聪明的阅读者》阳志平. 中信出版社\n202401022002\n上述卡片的「Ref」部分就是这张术语卡的卡片内容的来源：\n《聪明的阅读者》这本书 这本书的作者是阳志平 这本书的出版社是中信出版社 这里的：\n「Ref」是reference的简写，代表「参考」含义 书籍名称如果是中文，就写中文，如果是英文，就写英文 作者名字，如果有英文名，可以在「内容」上额外标注，便于后期查找，但在参考部分可以简写 写上出版社是为了后期查找这本书，为了快速操作可以省略 需要注意的是，卡片的原始参考并不一定只有我们读的某本书。比如我们阅读《聪明的阅读者》第五章（P103），发现作者提到了八种抽样阅读的方法，如果我们这时候要写一张“便利抽样”的术语卡，那么我们仅仅根据这本书中对便利抽样的解释往往是不够的，我们还需要进一步参考其他统计学的书目或网站对便利抽样的说明，这样我们才能对便利抽样有一个相对全面的了解。\n那这时候我们在卡片的末端写下的原始参考就可以类似这样：\n\u0026hellip;\u0026hellip;\n通过上图发现，对便利抽样这个概念的理解，除了《聪明的阅读者》这本书作为参考之外，我还在Wikipedia网站上收集了与便利抽样相关的介绍，这样原始参考就有了两个而不是一个。\n撰写卡片的时间点\n卡片撰写的时间点就是卡片的唯一编码，为什么这里说是“唯一”呢？因为我们可以将时间点精确到“分”，换句话说，我们默认自己一分钟内只输出一张卡片 —— 因为一张卡往往百十来字，无论是手写还是电子版，一分钟以内往往不能同时输出两张卡片，所以我们用精确到“分”的时间点作为我们撰写卡片的唯一编码。用数字表示就类如ABCDEFGHIJKL如下：\n编码 含义 ABCD 四位数年份 EF 两位数月份，月份是单数的，用双数表示（比如3月，用03表示） GH 两位数天数，天数是单数的，用双数表示（比如5日，用05表示） IJ 两位数小时，小时是单数的，用双数表示（比如上午7点，用07表示） Kl 两位数分钟，分钟是单数的，用双数表示（比如9分，用09表示） 比如我现在撰写这篇文章的时间是2024年1月2日下午6点12分，那么如果我这时候我写完了一张卡片，最末端就打上202401021812，它同时包含了“年 － 月 － 日 － 时 － 分”这几个元素。\n在电子版卡片的撰写时，如果每次都输入12位数字会非常繁琐，我们可以借用输入法的“自定义短语”功能，将这个12位的数字快速定义，用简写方式就能快速输出。以搜狗输入法为例，我们可以点击搜狗输入法图标后出现的偏好设置 - 高级 - 自定义短语设置 里面，添加一个简写式：\n#$year$month$day_dd$fullhour$minute\n如上图所示：\n我自己采用的缩写是「rq」，也即「日期」一词两个字的打头字母， 「出现位置」的意思是当我用搜狗拼音输入法打出rq两个字母时，在光标处显示对应精确时间的位置，我写的 1，意味着它会出现在第一位供我选择，而这时候我只需要按一下回车键就能自动显示精确时间了。 下面的短语规则是搜狗拼音认可的日期与时间的简写式。 具体操作示范如下：\n一旦我设置完成后，每次只需要输入rq（“日期”拼音的打头字母缩写），输入法就能快速将此时此刻包含“年 － 月 － 日 － 时 － 分”的编码打出来，为我们节省了大量的时间。\n如果是手写卡片，我们在卡片末端写上时间点可以直接通过手表、手机、总表等查看当时的时间，也可以按照这个格式输出。\n"},{"id":5,"href":"/docs/example/Ch5.%E6%8A%BD%E6%A0%B7%E9%98%85%E8%AF%BB/How-to-read-a-book-at-equal-intervals/","title":"02.等距抽样","section":"Ch5.抽样阅读","content":" 如何对一本书进行等距抽样阅读？ # 1 # 上篇文章中提到通过 简单随机抽样法 选取一本书的核心章节，我们已经了解，简单随机抽样主要是以全书进行抽样，保证被抽中的章节数量的覆盖率达到最低20%的标准。\n如果只是通过简单随机抽样的方式进行阅读会慢慢发现，这种方法有时候会存在一些类似盲人摸象的缺陷。\n这里可以做一个简单的思想实验：\n你是一个盲人，一个明眼人对你说，他牵来了一头大象，让你通过触摸它的肢体来猜猜大象长得像什么。同时他还特别强调，大象一共有20个部位可以触摸，但为了节省时间，只能选择4个部位。\n请问：这时候你通过随机抽样的方式可否实现对大象体型的判断？\n答案是不一定。\n理由很简单，比如我们选择简单随机抽样，并且抽中的是该大象的鼻孔、鼻尖、鼻身、鼻根这四个部位的话，就会发现，无论我们对这四个器官进行怎样的触摸，依然不能得到对大象体型的基础判断。\n阅读层面也类似，仍以《行为科学统计》为例，我尝试对其进行三次随机抽样，核心章节抽样结果如下：\n随机抽样次数 抽样结果 第一次 4, 6, 9, 10, 14 第二次 1, 4, 6, 7, 8 第三次 1, 6, 7, 10, 12 如果我们将这些抽样的章节集中放在全书的章节架构分析会发现，不同批次抽样的结果存在一些覆盖偏差：\n比如第二次抽样中，最后11章（红色部分）完全没有被抽中；第三次抽样中，最后7章完全没有被抽中。这样就导致抽样结果影响我们对全书核心章节的预判，比如作者刻意将重要的章节放在最后几章，那我们就忽视了这些重要信息。就好比前面的思想实验，虽然我们抽取了20%的章节，但可能这20%的被抽中部分对整本书的覆盖率不足导致抽样偏差。\n2 # 如何解决这个问题呢？\n回到盲人摸象规则，如果只能选择四个器官，我们可以让这四个器官覆盖动物的的「头 - 身 - 尾」来增加最终判断的准确率。\n切换到对全书的简单随机抽样，我们的标准并不再是单纯满足20%章节的覆盖就够了，还叠加了抽样章节对全书内容覆盖的程度。\n所以，我们可以在简单随机抽样的基础上进行适当修正 —— 在简单随机抽样的基础上增加「等距」标准。而这，就是等距抽样。顾名思义，等距抽样就是将全书章节按照指定间隔进行随机章节抽取。\n3 # 等距抽样同样分两步：\n1.计算整本书的抽样章节数量 # 如何判断指定间隔呢？这时候我们需要借鉴上一篇文章中提到的简单随机抽样法中的公式：\n抽样章节 = 书本章节总数 × 20% × 系数（1.1~1.6）\n注：为了计算方便，我们依然将系数默认设为1.3\n按照这个公式计算《行为科学统计》的抽样章节数量为5。\n2.计算整本书的等距间隔章数 # 因为我们知道了全书的章节总数，所以就可以求出等距间隔的章数（即间隔章数的数量）：\n全书章节总数 ÷ 抽样章节数 = 等距间隔章节数\n将上述数字带入这个公式，得出《行为科学统计》的间隔数量为4：\n19/5 = 3.8 ≈ 4 （四舍五入）\n如果我们将全书的第一章作为起点，那么全书我们需要阅读的章节就是第1章、第6章、第11章、第16章：\n由上图可知，同样是抽取20%的章节，但这次每个抽中的章节中间通过前面计算的4章进行区隔，较好的实现了对全章的覆盖。\n而一般书籍的章节总数不会超过50章，简单计算可以得出间隔的章节最大不超过5。那我们可以按照这个标准，制作一个等距抽样的快捷操作Excel表格：\n参照上述表格，我们只需操作一步，就能快速得到要等距抽样的章节 —— 直接在左上方「章节总数」表格内填写要等距抽样阅读的章节数量，然后按回车，就自动计算出抽样章节的数量，然后我们在第一列中找到对应的等距间隔数字，就可以按照标记颜色的章节进行等距阅读了。\n操作的 表格链接 在此。\n到这里，我们可以发现等距抽样与简单随机抽样的区别：\n抽样方法 抽样率 随机性 抽中章节的关系 操作步骤 简单随机抽样 20% 完全随机 无 1.计算抽样章节数；2.随机抽样 等距抽样 20% 部分随机 等距 1.计算抽样章节数；2.计算抽样章节间隔数；3.等距抽样 因为这两种抽样方式都不考虑书本内容，所以操作便捷快速，也暗示这两种方法更适合相对陌生、不知如何把握章节主题的书。\nRef：\n《聪明的阅读者》\n"},{"id":6,"href":"/docs/example/table-of-contents/without-toc/","title":"Without ToC","section":"Table of Contents","content":" At me ipso nepotibus nunc celebratior genus # Tanto oblite # Lorem markdownum pectora novis patenti igne sua opus aurae feras materiaque illic demersit imago et aristas questaque posset. Vomit quoque suo inhaesuro clara. Esse cumque, per referri triste. Ut exponit solisque communis in tendens vincetis agisque iamque huic bene ante vetat omina Thebae rates. Aeacus servat admonitu concidit, ad resimas vultus et rugas vultu dignamque Siphnon.\nQuam iugulum regia simulacra, plus meruit humo pecorumque haesit, ab discedunt dixit: ritu pharetramque. Exul Laurenti orantem modo, per densum missisque labor manibus non colla unum, obiectat. Tu pervia collo, fessus quae Cretenque Myconon crate! Tegumenque quae invisi sudore per vocari quaque plus ventis fluidos. Nodo perque, fugisse pectora sorores.\nSumme promissa supple vadit lenius # Quibus largis latebris aethera versato est, ait sentiat faciemque. Aequata alis nec Caeneus exululat inclite corpus est, ire tibi ostendens et tibi. Rigent et vires dique possent lumina; eadem dixit poma funeribus paret et felix reddebant ventis utile lignum.\nRemansit notam Stygia feroxque Et dabit materna Vipereas Phrygiaeque umbram sollicito cruore conlucere suus Quarum Elis corniger Nec ieiunia dixit Vertitur mos ortu ramosam contudit dumque; placabat ac lumen. Coniunx Amoris spatium poenamque cavernis Thebae Pleiadasque ponunt, rapiare cum quae parum nimium rima.\nQuidem resupinus inducto solebat una facinus quae # Credulitas iniqua praepetibus paruit prospexit, voce poena, sub rupit sinuatur, quin suum ventorumque arcadiae priori. Soporiferam erat formamque, fecit, invergens, nymphae mutat fessas ait finge.\nBaculum mandataque ne addere capiti violentior Altera duas quam hoc ille tenues inquit Sicula sidereus latrantis domoque ratae polluit comites Possit oro clausura namque se nunc iuvenisque Faciem posuit Quodque cum ponunt novercae nata vestrae aratra Ite extrema Phrygiis, patre dentibus, tonso perculit, enim blanda, manibus fide quos caput armis, posse! Nocendo fas Alcyonae lacertis structa ferarum manus fulmen dubius, saxa caelum effuge extremis fixum tumor adfecit bella, potentes? Dum nec insidiosa tempora tegit spirarunt. Per lupi pars foliis, porreximus humum negant sunt subposuere Sidone steterant auro. Memoraverit sine: ferrum idem Orion caelum heres gerebat fixis?\n"},{"id":7,"href":"/docs/example/Ch8.%E5%8D%A1%E7%89%87%E9%98%85%E8%AF%BB/%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%E4%B8%80%E5%8D%A1%E4%B8%80%E4%BA%8B/","title":"03.如何理解一卡一事","section":"Ch8.卡片阅读","content":" 1 # 我们可能都见过由乐高积木拼成的作品，这些作品最后是由一粒一粒积木组合而成的。我们可以将建构乐高作品的最小单位称之为「卡片」。一卡一事，指的就是我们需要主动为每一粒积木的功能、承重、样式等提前设置一个边界 —— 相比整个乐高积木作品而言，这一粒一粒积木本身的属性是有限的。\n（两张图，一张乐高作品图，一张积木集合图）\n所以，我们在撰写卡片时，就要意识到，每一张卡片所承载的信息量，就像一粒一粒积木一样，它本身有一个最大值。这个最大值，在具体实践中可以尝试用两个并行维度限定：\n标准 范围 字数 100~200 时长 ≤15分钟 这两个维度提醒我们，在撰写卡片时，要把重心聚焦卡片一个「点」上，把这个点用百余来字在15分钟内说清楚就好了，而不要在一张卡上包含过多信息、消耗太长时间。\n2 # 那么，如何更好满足这个标准呢？\n一个推荐的方法就是根据《聪明的阅读者》一书中不同卡片的示范进行模仿，先通过不断模仿找到感觉。阳老师反反复复提及过，卡片的数量大于卡片的质量，如果我们要搭建一个作品，首先要保证有足够多的积木块，否则一切都是虚无。\n（正面案例）\n我们再来看看另一张卡片\n（反面案例）\n当我们写到这里时，发现单独用文字似乎很难将它表述清晰，于是我们想画一张草图来表示，但这时候就要注意，我们原来写的是文字版的「术语卡」，我们在写作的过程中将这张术语卡的信息进行了进一步的升级，换句话说我们已经不知不觉过度到了图示卡。这时候我们就要明白，我们实际上对这张卡片的撰写形式进行了转移，虽然我们写的还是这张卡，但是呈现形式已经发生了变化。这时候我们就不能在原有的卡片上继续增加信息，而是增补为第二张卡片来撰写。当然，为了后续了解这两张卡之间有关联关系，我们可以用文字在术语卡上写明「关于这张卡的图示理解，参见图示卡 - XX」、在图示卡上写明「关于XX的术语卡还可以用图示卡进行更详细的说明」等等这样的关联信息。\n3 # 理解了一卡一事的具体操作，我们就会理解到，一卡一事对于我们卡片的撰写其实有两个层面的助力：\n第一，减轻了我们对卡片的撰写的压力。\n我们清晰意识到，写一张卡片容易，持续写卡片困难。因为日常中有太多太多干扰我们书写卡片的内部或外部因素，所以对于卡片来说，要给它限定边界，让它能快速完成掉。当我们通过时间和字数对每张卡片进行双重限定后，我们大脑对于书写一张卡片所感受到的压力相比写一篇文章、写一个分享稿之类要小很多很多，这样就加强了我们输出卡片的可能性。\n第二，减轻了我们对卡片的整理和拼接的压力。\n写完一张卡片后，我们对这张卡片进行快速回忆、提取卡片内容的关键词、将这张卡片与其他卡片进行拼接成文的时候，相比一整篇文章、一本书来说，无疑这张卡百余来字的卡片会更容易被我的大脑所回想起来。这就带来了另外一个好处，我们能将重心放到对不同卡片的关联和组合上，而不是不断对这张卡片进行理解、回想、消化。\n"},{"id":8,"href":"/docs/example/Ch5.%E6%8A%BD%E6%A0%B7%E9%98%85%E8%AF%BB/%E6%95%B4%E7%BE%A4%E6%8A%BD%E6%A0%B7/","title":"03.整群抽样","section":"Ch5.抽样阅读","content":" 如何对一本书进行整群抽样阅读？ # 1 # 我们在前两篇抽样方法中知道，「简单随机抽样」和「等距抽样」不考虑对书本内容的阅读而直接抽样，即「先抽样再阅读」，但我们也会发现，很多书会主动向我们告知全书的组成架构，相比我们一上来就对全书进行抽样来说，这些信息无疑更具有参考价值。所以在我们抽样之前就发现了类似信息，我们就要主动借助这些信息协助我们更好的抽样。\n那么，这种信息应该如何识别呢？\n从这些信息被识别出来的难易度而言分两种，一种偏显性，一种偏隐性。\n章节分组类别 说明 偏显性 书中有明显的分组说明 偏隐性 需要我们自己去分析与挖掘的章节分组信息 在整群抽样中，对全书进行分类的标准整体而言偏显性，因此往往比较容易直接从书中找到相关的提示。\n最明显的就是作者直接通过目录告知全书结构，比如《如何达成目标》一书，全书一共13章，作者直接在目录中将其划分为「准备就绪、预备开始、行动起来」三个部分：\n再比如莉莎 · 费德曼 · 巴瑞特教授（Lisa Feldman Barrett）的《情绪》一书一共有13章，虽然在目录上没有像《如何达成目标》一样体现出分类，但她在前言部分对这本书分成了四组：\n这样我们就不用一开始通过随机抽样或等距抽样来抽取章节了。\n再比如《行为科学研究方法》这本书，在「译者序」中，将全书16章分成了五大部分：\n同样，我们可以参考译者对该书的划分建议。\n又比如《人是如何学习的-II》，全书一共10章，在「中文序」中将全书分成七大主题：\n通过上述样例我们发现，当我们拿到一本书时，其实有很多地方都对一本书的架构有相关介绍：封面、封底、译者序、推荐序、自序、目录、前言、第一章、后记等位置值得我们花一点点时间留意，这些地方往往透露了全书整群分类的关键信息，可以帮助我们快速了解一本书的权重。对这些信息的掌握与利用，往往能起到四两拨千斤的作用。\n除此之外，如果一本书中没有找到类似的分组信息，我们也可以自己灵活且快速地对全书进行分组，比如《聪明的阅读者》提及的对《认知尺度》一书中的作者的身份进行分类：作家、科学家、企业家，而后快速选择相应的章节阅读。\n\u0026hellip;\u0026hellip;(其他案例)\u0026hellip;\u0026hellip;\n2 # 到这里我们发现，整群抽样的操作整体可以分成两个步骤：\n1. 寻找对全书章节进行分组的信号 # 对全书章节进行分组可以分成两种，第一种是他人进行的分类，比如作者、译者、作序者在封面封底、目录、推荐序、译者序、自序、导读、前言、后记等地方对全书进行的结构化分组；第二种由我们自己对全书进行分类。我们借助这些信息快读将全书分成由多个章组合而成的章群。\n2. 使用简单随机抽样法抽取要阅读的章群 # 我们将全书分成了多个章群后，会发现有的章群章节多、有的章群章节少，这时候我一般选择包含章数最多的章群优先进行阅读，以保证章群对全书的最大程度覆盖，比如前面介绍的《如何达成目标》一书有3个部分，我们就优先阅读篇幅最大的第二部分；如果我们抽取的章群数量差不多，比如《人是如何学习的-II》一共有7个主题，这些主题包含的章节数量大体一致，我们就在从中通过随机抽样方法抽出一个主题阅读。\n需要注意的是，由于我们最终希望抽取一个章节进行阅读，而 临床试验统计网 不支持抽取数量为1的简单随机抽样：\n所以我们如果希望自己从选取的章节群中随机抽样1个章节群，可以尝试将上面的「抽样个数」填成 2，然后从抽出的数字中随机选一个开始阅读即可。\n3 # 到这里我们发现，整群抽样的关键在于对全书的章节提前分组，一旦确认了章节的组别，就能很好抽取章节。与「简单随机抽样」操作方法类似，唯一区别在于我们通过简单随机抽样抽出来的是多个章节，而这时候我们只需要抽取其中1个群章即可，所以我们最终需要阅读的不是一个一个的章节，而是一个或多个章节群。\n整群章节抽样流程细化如下：\n4 # 整群抽样相比简单随机抽样与等距抽样，有三个明显优点：\n整群抽样抽取的一般是多个章节组成的大样本，而非彼此独立的单一章节，所以大幅度降低了全书章节抽样的时间与精力成本。 整群章节抽样大都基于书中目录、序言、导言、后记等给到相对明显的提示对全书进行结构划分（还可通过人物的身份、角色、职位、特质、所处的国别、空间、年龄段等维度进行划分），所以整群的建立速度相对迅速。 一旦建立了章群的结构，就能马上对章群展开文本细读工作，相对传统从头看到尾的阅读习惯，整群抽样后更强调对文本阅读的深度理解，容易对章群形成更深入的认知。 当然，整群抽样也存在着一些缺陷：\n无论我们整群抽样的阅读章节是基于篇幅占比还是随机抽样产生，都相当于「有舍有得」 —— 得到了一个完整的章群，舍去了对未选中章群的阅读，而这些未选取的章群中可能包含着全书核心信息的部分或者一些不同于已选章群的差异化信息，比如如果抽取的章节群内某一章节与其他章群的一个或多个章节存在特定关联，而整群抽样的阅读就有可能觉察不出这种外在关系。在这种状况下，提高整群抽样的数量可能是一个可以尝试的方案，但也带来了更多增细阅读的成本。 如果整群抽样前发现书中未能有关于全书结构的分类信息，而且也较难对全书进行结构化分类，这就带来了整群抽样的难度，比如可能需要引入后续「分层章节抽样」的策略，或者将不同抽样策略进行叠加以获得更精准的权重。 "},{"id":9,"href":"/docs/example/Ch5.%E6%8A%BD%E6%A0%B7%E9%98%85%E8%AF%BB/%E5%88%86%E5%B1%82%E6%8A%BD%E6%A0%B7/","title":"04.分层抽样","section":"Ch5.抽样阅读","content":" 如何对一本书进行分层抽样阅读？ # 1 # 在前面提到了通过 整群抽样 方法，其核心是从全书中抽取一本书的一个「章节群」后开始阅读：\n如上图所示，如果我们通过整群抽样最终选择了整群3，那么意味着整群1和整群2的章节信息将被我们放弃，而整群1和整群2累积章节数量是整群3 的2倍（以上只是示范，实际阅读中可能遭遇更多），所以单纯使用整群抽样对全书重要信息的遗漏可能比较明显。而我们又不可能对整群1和整群2的章节进行全部阅读，这时候我们如何降低整群抽样带来的信息遗漏的风险呢？分层抽样阅读可以帮助我们降低这种缺陷。\n2 # 什么是分层抽样阅读？ # 当我们拿到一本书后，我们首先确认这本书中有哪些不同的特征，再将整本书按归纳的特征划分成多个「特征章群」，然后借助简单随机抽样方法对每个特征章群进行章节抽样，最后对所有特征章群分别抽取了一个或多个章节，这些章节最后组成一个「小集合」，这样就可以进行文本细读了。\n通过上图可知，分层抽样最关键的步骤在于第二步：对章节进行特征分层，其他步骤相对来说比较简单。那么我们可以通过什么方法分层呢？\n在《聪明的阅读者》一书中，阳老师介绍了两种分层方法：参考前面整群抽样阅读方法，可以将特征分层也可以分层两个「显性」和「隐性」两个维度：\n属性 分层方法 描述 示范 显性 人物身份/角色 对于书中出现的人物进行身份的差异化命名 作家、科学家、企业家 隐性 权重章节 根据代表全书关键思想的权重章节进行命名 核心章节、边缘章节 换句话说，对一本书进行分层抽样阅读的关键操作在于第二步 —— 对全书章节进行特征分层。\n比如《人性实验》这本书，通过目录我们发现发现全书一共有28个章节，每个章节描述一个与社会心理学相关的研究：\n针对这本书应该如何进行分层呢？\n我们可以用 时间 来划分，因为全书章节默认以研究论文发表时间排序，所以我们就以时代线排序：\n195x ~ 196x 197x ~ 198x 199x ~ 200x 201x ~ 相关章节按年代分组如下：：\n序列 论文发表周期 章节 1 195x~196x 1~6 2 197x~198x 7~18 3 199x~200x 19~25（排除23） 4 201x~ 26~28 +23 这样我们就将全书分成了4层，后面就可以在这4层中进行简单随机抽样，抽出章节开始阅读。\n我们还可以根据 社会心理学所涉及到的领域 来划分，当我们找到主流社会心理学教材，分析目录后发现，社会心理学一般可以分成如下几个层面：\n主题 描述 社会认知 如何我们理解、解释、记忆和使用关于社会世界的信息 社会影响 如何人们被他人的行为、态度、信念和存在所影响 人际关系 人们在人际互动中的行为和情感，例如吸引力、友谊、爱情等 群体行为和社会身份 我们在群体或社区中的行为以及我们如何理解和应对我们的社会身份 偏见和刻板印象 我们对特定群体的固有认知和情绪偏见，以及如何形成和影响这些偏见 这就相当于获得了社会心理学所涵盖的5大主题，这五个主题就相当于找到了阅读社会心理学书籍的「抽样层」。\n那么这时候，我们其实可以将本书28个章节划分到五大主题中：\n序列 主题 章节 1 社会认知 3/8/10/14/16/20/21/22/23/27 2 社会影响 1/2/4/5/6/17 3 人际关系 7/13/18/19 4 群体行为和社会身份 9/11/12/25/26/28 5 偏见和刻板印象 15/24 这样我们就得出了《人性实验》一书全部章节在社会心理学领域涉及到的章节覆盖数量：\n序号 主题 章节覆盖数量 1 社会认知 10 2 社会影响 6 3 人际关系 4 4 群体行为和社会身份 6 5 偏见和刻板印象 2 通过上图我们发现，对于《人性实验》这本书而言，五大社会心理学领域涉及到的篇幅是不同的，如果我们这时候对五大主题各选取1章来阅读，就会产生部分主题（比如社会认知模块）抽样太少的偏差，而这时候我们就可以借鉴之前学到的简单随机抽样方法，分别对这五个主题的章节进行随机抽样，比如这样：\n序号 主题 章节抽样数量 1 社会认知 3 2 社会影响 2 3 人际关系 1 4 群体行为和社会身份 2 5 偏见和刻板印象 1 这样我们就得到了从五大模块的章节分组中进一步得到了9个章节，相当于全书约30%占比，相比前面的整群分组阅读方法，我们这次得到的章节对社会心理学领域涉及到的五大模块都能覆盖，这种分组方式，就可以称之为「分层抽样」。\n当然，我们不止通过主题来分组，还可以通过其他方法进行快速分组：\n属性 分层项 说明 示例 显性 身份/角色 对于书中出现不同身份或属性的人/事/物进行分类汇总 身份A、身份B、\u0026hellip;\u0026hellip; 显性 模块分组 封面封底、目录、译者序、推荐序、自序、前言、后记明示的全书分组 分组1、分组2、\u0026hellip;\u0026hellip; 显性 时间分组 对于书中出现的章节代表的不同时间线进行分组 时间1、时间2、\u0026hellip;\u0026hellip; 显性 空间分组 对于书中出现章节代表的不同空间线进行分组 空间1、空间2、\u0026hellip;\u0026hellip; 显性 关键词分组 对于书中出现的高频关键词进行排名的分组 关键词1、关键词2、\u0026hellip;\u0026hellip; 显性 篇幅分组 将书中章节占用全书的篇幅进行分类汇总 全书篇幅TOP1/2/3，其他\u0026hellip;\u0026hellip; 隐性 论文应用 书中作者自己论文引用最多占比，书中作者他引论文最多占比 全书自引/他引论文TOP1/2/3,其他\u0026hellip;\u0026hellip; 在分层阅读的操作中，需要注意的有两点：\n在第二步将全书章节按照既定标准分配到每个标准层时，每个标准层都应该是互斥关系，也就是分组后的章节群之间不会存在重叠，但又共同完整覆盖了整本书的内容。 将全书分好层之后，要留意每层章节的数量差异，避免分层后直接各调一章开始阅读，而是要采取 80/20 原则进行差异化抽样，以确保最终抽样的数量能代表各自所属的章层。 3 # 相比简单随机抽样，分层抽样既关注整体（全书分层）又注重局部（每层抽样），所以它相对来说抽取的章节更具多样性，确保了样章的差异化，从而有助于更好的理解全书的内容。如果看过上篇 整群章节抽样 的介绍，会发现分层章节抽样与整群章节抽样都有将章节组成「章群」的步骤，所以它们看起来可能比较相似，但细致分析依然有两个明显差异：\n对全书进行整群章节抽样的标准相对显性从而容易获取。比如在封面、封底、目录、导言、自序、他序、第一章、后记等模块就能相对轻松的找到整群抽样的分组信息，而分层章节对读者的抽样能力要求稍高，涉及到对全书的概览能力、书中引用文献的分析能力、作者审美偏好的判断能力等等。所以找到一个详尽而明确代表整本书的分层抽样标准具有一定的挑战性，如果无法科学合理地对全书的层级进行分类，最终可能导致随机抽样的章节出现偏差，从而对全书的理解产生误判；此外，如果设定的分层标准导致某些章节既属于A层级又属于B层级时，那么最后的抽样结果可能对全书的正确理解造成偏离。相比较其他抽样方法，分层抽样需要更多的尝试与练习。\n整群抽样的目的是降低抽样复杂性以提高抽样效率，所以整群分类的操作相对简单而且快速，而分层抽样阅读的目的是提高抽样精度以减少误差，所以它创建的章节群中的章节有着明显的共同特征。整群章节抽样后需要对整个章群进行阅读；而分层抽样的目标是获取差异化属性的各个章节群，然后再从各章节群中抽样出少量代表该章群样本的章节，最终逐个汇总起来文本细读。因此，当我们拿到一本书后，如果暂时没有时间或能力对这本书进行精细化分类，那么我们不妨借助书中已有的显性信息采用整群抽样的方法，这样便于快速激活自己的阅读行为，而如果时间足够，就可以学习对全书核心章节判断的方法对该书进行更加精细化的分层抽样。\n分层章节抽样与整群章节抽样差异如下图示简化：\n"},{"id":10,"href":"/docs/example/Ch8.%E5%8D%A1%E7%89%87%E9%98%85%E8%AF%BB/%E5%A6%82%E4%BD%95%E6%92%B0%E5%86%99%E5%9F%BA%E7%A1%80%E5%8D%A1/","title":"04.如何撰写基础卡","section":"Ch8.卡片阅读","content":"在卡片输出的九种形式中，基础卡是最简单也是最基本的卡片类型。那么，该如何撰写基础卡呢？\n1 # 基础卡之所以命名为「基础卡」，是因为它相比其他八种卡片，灵活度与兼容度最强。我们对比一下基础卡和其他卡片的结构就能看出，基础卡的「内容」涵盖范围是最广的，如果简单理解，其他八类卡都是基础卡「内容」的细化。\n我们就能明白，基础卡的内容具有非常大的包容性，它主要体现在对卡片内容限定的标准非常低，这样我们平时阅读时的任何所感所想，都可以通过基础卡的形式来撰写，相比其他卡片类型， 我们就能更容易启动我们撰写卡片的行为，也更容易持续形成卡片输出的习惯。\n2 # 以书中提到的案例为例：\n基础卡\n标题：读《找工作》\n内容：今天读了格兰诺维特的《找工作》一书，了解其中的弱联系原理，很有收获。\n参考：马克・格兰诺维特.（2008），找工作（张文宏等，译）. 格致出版社.\n唯一编码：201501011506\n读完这张基础卡中的「内容」我们发现：\n作者并没有清楚明示「弱联系原理」是什么 也没有清楚说明他的「收获」具体是什么 看起来一张模模糊糊没什么内容的卡片，其实正好说明了「基础卡」对内容要求的宽泛 —— 有时候，基础卡并不严格要求我们一定要将阅读的内容说清楚讲明白，同时也暗示了「写」这个行动在优先级上，高于「写好」的优先级。\n以上述卡片为例，我们在撰写这张卡片之后，至少可以作如下发挥和拓展：\n拓展项 卡片类型 弱关系原理的定义 术语卡 弱关系原理的典型案例 术语卡 弱关系原理反常识的地方 新知卡 弱关系原理的图示化理解 图示卡 弱关系原理的行为实践 行动卡 阳老师反反复复强调，卡片的数量大于质量。所以，即便我们现在是一个阅读的新手，即便我们刚刚接触「基础卡」，同时对其他的八种卡片都不了解，也不妨碍我们这时候撰写一张基础卡。哪怕我们撰写的基础卡并不完整、我们自己也不满意，也没关系，只要我们记住卡片的数量大于质量这个硬道理，不停地写写写卡片，我们就能在未来对卡片大法的不断学习与实践中，逐步丰富和纠正我们之前对卡片的一些认知偏差，这始终都是一个动态的过程。\n我们再以书中对基础卡的第二个示范来深入理解基础卡：\n标题：读《听听那冷雨》\n原文：惊蛰一过，春寒加剧。先是料料峭峭，继而雨季开始， 时而淋淋漓漓，时而淅淅沥沥，天潮潮地湿湿，即连在梦里，也 似乎把伞撑着。而就凭一把伞，躲过一阵潇潇的冷雨，也躲不过 整个雨季。连思想也都是潮润润的。每天回家，曲折穿过金门街 到厦门街迷宫式的长巷短巷，雨里风里，走入霏霏令人更想入非非。想这样子的台北凄凄切切完全是黑白片的味道，想整个中国整 部中国的历史无非是一张黑白片子，片头到片尾，一直是这样下着雨的。\n评论：余光中散文名篇《听听那冷雨》堪称白话文范文，将 中文之美用到了极致，开篇“料料峭峭” “淋淋漓漓” “淅淅沥 沥”“凄凄切切”，又“天潮潮”“地湿湿” “潮润润”，又“惊蛰一过” “春农加剧” “雨季开始”。从头读到尾，亳不呆板。\n参考：阳志平《风格练习》\n唯一编码：201711050101\n看完这张基础卡的示范，相比第一种基础卡案例，区别如下：\n卡片示范 基础卡 - 1 基础卡 - 2 区别1 提到了《找工作》一书中的「弱关系原理」这个名词，但并未详细说明 提供了详细的原文 区别2 提到了自己读完的感受，但只是用「很有收获」来概述，未详细展开 对原文进行了非常细致的解析 为什么这两张基础卡的范例会有较大的差异？\n这其实正好说明了基础卡「内容」层面的强大张力 —— 我们既可以在对一本书某些内容了解不深的前提下撰写基础卡，也可以在对某个知识点深入理解后撰写它。这种可详可略的包容属性，正好是基础卡的明显特征。基础卡的这一属性启发我们，对于一本书，并不需要我们一定要读完、读懂、读透之后再去撰写卡片，而是从阅读的起步阶段，就尝试用输出模式来阅读。\n3 # 比如我前几天在读日本诗人良宽的《良宽歌句集》时，翻到这样一句话：\n赠人书信的文字\n优美地写成了\n那之后的一会儿\n真是开心\n我读完这一段之后，脑子马上关联到了我几次感到「真是开心」的几个瞬间，忽然又想到，良宽将让自己开心的这个瞬间通过文字给定格了，仿佛通过文本拍下了他当时兴奋的那一刻。而我自己好像只是在当时笑笑然后就没有然后了。所以我就打算通过模仿前面第二种基础卡的模式输出一张卡片：\n这张卡片严格来说并不算对良宽这句诗的细品，而只是关联到了我提醒自己快乐瞬间的想法。但通过这张卡片的输出，会提升我对自己所处的情境中感受到的一些惊喜或愉悦主动进行文字见证的频率。\n没想到过了几天后，我在冲刺阅读大法训练营大作业的时候，我突然想到了良宽这句诗，于是我迅速翻开它，觉得我终于把大作业搞定之后的兴奋和诗句中「真是开心」相映，所以我就想着把这句诗放到大作业的末尾，来提升整篇文章的美感。但直接照搬这句话并不合适，所以我尝试进行了一些调整，我又想到之前陶喆的《Melody》歌词中有这样一句话：\n终于落下休止符的那首歌\n我听着每一个音符流过的回忆\n我觉得可以把这里的「休止符」一词用来隐喻我把大作业写完这个行为，把良宽的「真是开心」改成「我发现了喜悦」。但我这里休止符并不像陶喆歌词含义的终结，而是寓意一个新的开始，所以我在后面又增补了一段。最后的改进文本如下：\n\u0026hellip;\u0026hellip;\n在落下休止符的这一刻\n我发现了喜悦\n从消费者到创作者\n这是崭新的开始\n从这个例子可以发现，前几天我输出良宽那句诗歌的基础卡时，首先增长卡片的信息含量其实并不高，其次我当时也并未能意识到在后面还能将这张卡片进行扩充，但我一旦将这张模糊的卡片写完后，就相当于在我的大脑建构了一个「未尽事宜」的缺失感，不知不觉提醒我在未来能对这张卡进行更加深入的输出或完善，而在我写完大作业的那一刻，我大脑自动关联了这张卡片，于是我就再次利用它为我的文章增添了美感。\n4 # 综上，基础卡相比其他卡片类型，有两个典型的特征：\n高兼容性。\n基础卡即可写的详细，也可写的宽泛。作为一个聪明的阅读者，我们需要充分借助基础卡的这种特征，帮助我们更高频输出卡片。\n高拓展性。\n由于基础卡的内容相对宽泛，所以我们可以将基础卡作为其他卡片类型的「跳板」进行更加灵活的关联与运用。\n"},{"id":11,"href":"/docs/example/Ch5.%E6%8A%BD%E6%A0%B7%E9%98%85%E8%AF%BB/%E4%BE%BF%E5%88%A9%E6%8A%BD%E6%A0%B7/","title":"05.便利抽样","section":"Ch5.抽样阅读","content":" 如何对一本书进行便利抽样阅读？ # 1 # 前面我们提到了四种抽样阅读的方法 —— 简单随机抽样、等距抽样、整群抽样和分层抽样。我们会发现，这四种抽样方法虽然各自有其不同特征，但它们都是基于概率抽样而生，换句话说，在实际操作中，都需要遵守一定的随机性来帮助我们选取要阅读的章节。\n那么，有没有不遵循随机性但也能对全书进行抽样阅读呢？答案是肯定的。\n不遵循随机性，意味着我们不再依赖概率来帮我们作出选择，我们决策的依据更多倾向于自我的主观判断。而便利抽样阅读就是依赖主观判断的一种阅读方法 —— 当我们拿到一本不知道从何读起的书，我们也恰巧没太多时间去学习与研究更好的阅读方法，这时候，我们自己主观上觉得有哪些便利条件帮我们选择章节样本，我们就采取怎样的方式来抽样。与前面提到的复杂一些的概率抽样（比如分层章节抽样）不同，我们不需要作更多更复杂的准备工作，而是怎么需求就怎么来，怎么容易就怎么来。\n2 # 1.书内信息采集 # 假设我们刚刚拿到一本书《人格：认识自己，做更好的你》这本书，通过目录我发现这本书是在介绍大五人格：\n那我们应该优先读哪一章呢？\n按照便利抽样的原则「怎么需求怎么来」的原则：\n如果我们发现自己的自律性不足，想知道人格特质层面有哪些原因，这时候我们就可以直接对照目录中的「尽责性」去读第五章； 如果我们发现自己的性格比较内向，不知道如何应对，那么我们就可以直接对照目录中的「外向性」去读第三章 \u0026hellip;\u0026hellip; 这种主观将书中的「目录」作为引导自己阅读的策略，就是一种便利抽样的方法。\n除了我们自己的需求优先之外，我们还可以从作者角度出发来引导我们进行便利抽样。依然是《人格》这本书，我们从目录查看第九章，翻开看看，发现这一章似乎是在对整本书进行总结：\n那么，就作者而言，可以做一个假设，就是他在总结章反复强调的一些特质，可能是全书比较重要的章节。\n那么，作者在这一章里面反复强调了哪些人格特质呢？\n我们既可以通过手动逐一查找，也可以通过词频软件将第九章的电子版进行词频统计，最后发现第九章的名词的排序TOP10如下：\n如图所示，目录中介绍的神经质与外向性两词在第九章并列第四，所以这时候，我们可以从这两个人格特质中随机选取一个开始展开阅读。\n这就是快速通过书内的信息（本书是第九章）快速便利抽样，获得优先阅读的章节。类似方式包括从封皮、封面、译者序、推荐序、自序、前言、导读、各个章节、后记、致谢等篇幅中找到可以便利抽样的信息，开始阅读。\n除此之外，还能在书本外寻找相关信息。比如\n2.书外信息采集 # 我现在拿到《行为科学研究方法》这本书，我发现一共有16章，如此多的章节，哪一章才是比较重要的章节呢？\n这时候我发现身边正好有一本《心理与行为科学研究方法》，于是我快速拿起这本书，翻开目录，发现该书第四章与第五章谈到了效度与信度两个概念，而这两个概念正好在《行为科学研究方法》的第四章亦有介绍：\n这时候我就不需要再纠结到底应该先看哪章，先看两本书共同介绍的信度与效度的章节即可。\n这种快速借助身边可以利用的资源（书籍）进行关键词抽样的行为，就属于便利章节抽样。\n3 # 通过以上示范可以发现，便利章节抽样有两个最重要的特征：\n目标引导\n我们在便利抽样前可以被一些具体问题引导，比如遇到了怎样的问题，就在书中选取阅读相关的章节。\n情境利用\n我们主动识别并利用身边的情境线索 —— 我们对当时所处的时间、当时所处的空间、当时所拥有的人际、当时的情绪、当时面临的任务进行识别，看看有哪些方便我们抽样的线索，先用起来，抽了再说。这种以主观判断为主的章节抽样方式，不要求对书本知识有深入的理解，也不要求抽样的章节是否覆盖全书，所以更加灵活自由，体现了便利抽样的「便利性」。\n与之同时还要发现，虽然便利章节抽样有许多优点，但由于样本采集借助了身边一些便利条件作为「跳板」，而这些「跳板」的选择又受到读者本人的认知、特质、情绪以及所处情境的交互影响，最终抽样出来的章节可能会带有一定的偏见。所以在合适的情境下，可以叠加概率抽样的方式从而得出更加精准的抽样结果。\n"},{"id":12,"href":"/docs/example/Ch8.%E5%8D%A1%E7%89%87%E9%98%85%E8%AF%BB/%E5%A6%82%E4%BD%95%E6%92%B0%E5%86%99%E8%A1%8C%E5%8A%A8%E5%8D%A1/","title":"05.如何撰写行动卡","section":"Ch8.卡片阅读","content":" 1 # 行动卡的结构如图所示，其内容模块主要由「原理」和「行动」两个元素组成。\n那么，如何更好的理解这两个元素呢？我们用两个标准来认识：\n标准1：依据原理执行行动 标准2：行动权重大于原理 用一张图来描述就是这样：\n我们用书中例举的行动卡案例来理解这两个原则：\n标题：读《找工作》\n原理：今天读了格兰诺维特《找工作》一书，了解其中的弱联系原理，很有收获。\n行动：打开微信通讯录，尝试将其按照联系频率分成强联系、 弱联系、介于两者之间的三组。\n参考：马克・格兰诺维特.（2008 ）.找工作（张文宏等，译）. 格致出版社.\n唯一编码：201501011506\n如上可知：\n原理部分就是《找工作》一书中的「弱联系原理」，行动部分就是作者「对微信通讯录的分组操作」这一行为。\n如果我们仔细阅读上面这张行动卡，会发现一个典型特征是作者展开行动依据的弱关系原理并没有详细展开，这是为什么呢？\n按常理，我们执行一个具体的行动，一定要将这个行动的原理阐述地清晰明了。但其实不然。我们要明白，无论是撰写行动卡还是其他任意类别想的卡，一定要遵循卡片撰写的基本原则。前面我们在「一卡一事」原则中提及，一张卡片所能承载的信息量有限，所以一张卡片只需要呈现一个重点就够了。就这张行动卡而言，如果作者将弱关系原理和他依此展开的具体行动都在行动卡上详细展开，那么就违背了「一卡一事」原则，相当于大幅增加了一张卡片本身的知识密度，这将导致大脑对这张卡片的认知难度增加，未来对这张卡的再次整理与拼接将变得不易，因为我们大脑极有可能会觉得这张卡片的内容过于复杂而陷入整理与拼接行为的瘫痪。\n所以这个时候我们就要两权相利取其重，把「行动」部分的权重放大，这正好印证到前面提到的行动卡的标准二：行动的权重大于行动所依据的原理，这也是行动卡为什么叫「行动卡」的缘由所在 —— 通过撰写行动卡这种行为，创造自我行动的仪式感，提高行动执行的可能性。一句话概括：行动卡的核心是激活行动。\n2 # 既然行动卡的核心是「行动」，那么我们就要尽最大努力确保书写出来的行动卡能被执行到位。在撰写行动卡时，我们对行动的执行有两种可能：\n第一种可能：写完行动卡后马上执行该行动 第二种可能：写完行动卡后需要间隔一段时间才能执行该行动 前一种达成的难度较低，只需要将具体动作与行动内容写清楚就好。比如书中提到的行动卡案例里面，就采用了「打开」这个细化动词来强化行动的落地：\n行动：打开微信通讯录，尝试将其按照联系频率分成强联系、 弱联系、介于两者之间的三组。\n第二种情形中，因为书写与行动之间留下了情境间隙，这就为行动的执行带来了更多不确定性。比如：\n撰写行动卡后因为各种原因反而忘记了执行 撰写行动卡后执行时忘了行动步骤而倾向于不执行或者暂缓执行 如何规避这种窘境？\n一个有效策略是用结合阳老师的情境论的「如果\u0026hellip;就\u0026hellip;」的执行意图。\n换句话说，当我们在阅读时，如果意识到有一些可以用来运用在自己工作生活中的具体行动，那么这时候就可以通过设想自己在什么具体的情境下完成设想好的具体动作，以此更好的在未来激活这项行为。\n那么，有哪些具体的情境呢？按照阳老师的情景论，可以分成五类情境：\n我们通过“如果”对自己未来的行动进行假设，而后面的“时间”、“空间”、“人物”、“任务”、“情绪”这五类情境，就是对未来我们执行后面的“我就”这个动作的外在提醒。\n时间：指在什么时候。它既可以指向具体明确的时间点（比如上午11:00），也可以是我们大脑不需要借助任何第三方时间工具而感知到的时间（比如中午吃饭时、下午到公司时等）。对于前者，我们可以借助一些提醒工具来帮助我们感知到这个时间点的到来；对于后者，我们可以嫁接其他情境线索来提醒我们。 空间：指在什么地点。这里的地点可大可小，它是可以被大脑感知到的一个具体的空间。比如“回到家”中的“家”、路过XX商店的“商店”就是一个具体的地点。 人物：指具体的人。 任务：指我们执行的某项有明确目的行动。比如整理一份文件、去见一个客户、做一个分享等。 情绪：指我们自己因为遭遇某事而生发出来的能够被我们大脑感知到的喜怒哀乐的体验。 需要留意的是，这五类情境在现实中往往不是单独满足，比如当我们在行动卡中预设“到今天下午5点”这个时间情境的时候，往往还有一个相对应的空间情境（今天下午5点我会在什么地方？）或者人物情境（今天下午5点我会与谁在一起？）等等。\n所以“如果\u0026hellip;就\u0026hellip;”可以解释为：\n如果在未来满足了（时间 、空间、人物、任务、情绪）这五类情境中的一个或多个情境时，我就尝试做一个动作来开始我的行动。\n3 # 试以艾尔菲 · 科恩的《奖励的恶果》一书为例，书中提到表扬他人的四条建议：\n表扬时对事不对人 使表扬尽可能具体 避免虚假表扬 避免设置竞争的表扬 当我读到这里时，我想着可以依据这里的建议来实践一下。\n假设此时此刻并没有表扬孩子的条件（比如他正在上学），那我这时候至少可以先写出两张卡，一张新知卡、一张行动卡。\n又假设新知卡我们暂时还不会写，那我们将其换成最简单的基础卡，比如将上述四条建议抄写在基础卡上，同时写出一张打算在今天晚上表扬孩子的行动卡：\n标题：读《奖励的恶果》\n原理：今天读了艾尔菲 · 科恩的《奖励的恶果》一书，其中提到了表扬他人的四条建议，很有收获。\n行动：今天回到家一看到儿子时，就一直看他并找出他某一个行为的具体优点，然后针对这个优点进行如实描述并称赞他。如果不记得表扬的完整建议，先完成表扬行为后再翻开「如何奖励」的基础卡，对比刚刚奖励孩子的话语，后面继续改进话术。\n参考：艾尔菲 · 科恩，《奖励的恶果》\n唯一编码：202401082337\n上述这张行动卡的「行动」部分，可以视为「如果\u0026hellip;就\u0026hellip;」的分解：\n「如果」部分\n这部分我写的是「今天回到家一看到儿子」，这句话就内嵌了三个关键情境：\n时间情境：今天 空间情境：家 人物情境：儿子 可能有朋友会觉得有必要写的这样细致吗？直接写一句「今天回家表扬儿子一下」不就好了吗？\n其实不然。\n前面我们着重强调过，大脑中拟定计划时，往往会高估自己达成该计划的可能性。所以，针对行动卡中要执行的行动，必须细化到具体的动作层级而不是单单写一个行动，这样才能真正提升我们将写出来的行动真正落地做到的可能性。\n以上述行动卡为例，如果我们在撰写时特别强调了这三个情境，就相当于提前在我们的大脑中模拟了一旦时间（今天）、空间（家）、人物（儿子）三个情境同时满足时，就要准备做一件事情的想象。这种想象的激活前提越细致，我们就越能在未来的情境中识别出他们的存在。在撰写中，我们往往要为自己设定的行动设置2种以上的情境提示信号，这样对于自己希望产生的行为会有更大的刺激导引作用。\n「就」部分：\n在这里，我写的是「一直看他并找出他某一个行为的具体优点，然后针对这个优点进行如实描述并称赞他。」\n我们尝试对这个「就」分解一下：\n第一步：一直看他 第二步：找到一个优点 第三步：对这个优点进行如实描述 第四步：称赞 看起来这里的步骤有四个，但其实我们只需要在行动卡中强调第一步，因为等我们真正执行完第一步，后面的步骤会被大脑自动「回忆」起来进而执行。\n那么，如何在行动卡的撰写中强调「第一步」的行动呢？\n答案就是使用具体的动作词汇而不是行动词汇。比如这里我在第一步中使用的是「看」这个大脑非常熟悉的动作词汇，而不是「观察」、「分析」等相对抽象的词汇。\n这种动作词汇有一个典型特征在于，它能在1~3秒内就完成掉。对于一个3秒内就能完成的动作，我们通过行动卡进行预设时，大脑就不会认为这个行动复杂或者难以理解抑或难以做到而产生畏难心理，这就相当于增加了它未来可以被达成的概率。又因为我们前面为这个动作设置了多种情境的交互提示，所以我们就能在未来更容易做到它。\n所以，行动卡里的「行动」部分，我们可以按照如下图示来撰写：\n这里其实还有一个细节，我们看行动卡中还有这么一句：\n如果不记得表扬的完整建议，先完成表扬行为后再翻开「如何奖励」的基础卡，对比刚刚奖励孩子的话语，后面继续改进话术。\n这句话是什么意思呢？\n我们在最前面提到“行动的权重大于原理”，换句话说，行动卡的关键在于真正激活我们的行动，至于行动依据的原理，它的重要性排在行动之后。如果我们在行动卡中的情境满足了，这时候我们如果因为忘记了行动原理或者行动步骤而直接选择放弃执行，那就相当于丧失了一次行动的机会。为了避免出现这种情形，我特别在行动卡中预设了一种替代“放弃执行”的方案，也就是“先表扬再说、后续再迭代表扬”的行动。\n这种做法可以视为“如果\u0026hellip;.就\u0026hellip;\u0026ldquo;的备选方案。\n前面我们强调了情境对行动的巨大影响，而我们的大脑往往会高估自己的执行能力，低估情境对行动的影响。所以这里特别增加了一个备选方案，相当于对第一套方案执行不到底设置了一个缓冲，防止这个行动跌落到“不执行”这个最差的地步。如果你在撰写行动卡时对自己未来是否真的执行这个行动不是100%确定，那么你也可以像我一样增加一个优于不执行的备选方案。\n4 # 如何撰写行动卡？你可以行动卡的组成部分简化为两个模块：原理、行动\n如何理解行动卡？你可以认为行动卡的核心是最大程度将知识转化为我们的行动。\n如何执行行动卡？你可以用“数量＞质量”的基本法原则写、写、写，用“做了再说”的原则将行动卡中的行动做、做、做。\n"},{"id":13,"href":"/docs/example/Ch5.%E6%8A%BD%E6%A0%B7%E9%98%85%E8%AF%BB/%E4%B8%93%E5%AE%B6%E6%8A%BD%E6%A0%B7/","title":"06.专家抽样","section":"Ch5.抽样阅读","content":" 如何对一本书进行专家抽样阅读？ # 1 # 我们在上一个技巧中提到了非概率抽样阅读中的便利抽样阅读法，其中讲到了从书内和书外寻找相应的抽样提示，在这些信号中，还有一种相对特殊的信号 —— 以「人」为核心的信号 —— 作为一个新手，我们可以直接听取某些专家的意见来帮我们快速定位一本书的核心内容，专家建议我们一本书的核心在哪里，我们就定位到这个章节快速开始阅读，这就是专家抽样阅读。\n2 # 比如《情报分析心理学》这本书，在第一章开头，作者小理查兹 · J. 霍耶尔（Richards J. Heuer, Jr.）就向我们告知本书的重点是第八章：\n比如雷科夫（George Lakoff）和詹森（Mark Johnson）合著的认知语言学入门必读书目《我们赖以生存的隐喻》，台湾版译者周世箴在「中译导读」中，就提出了本书的阅读指南：\n本书论述体例不同于一般理论书籍，读者面向多元，前面三分之一篇章(1-10）浅显易懂，所举皆读者所熟悉的案例，初接触者很容易入门，而且会产生往裡鑽的动力。中间的三分之一(11-23)理论性开始加强，但难易适中，正好可以帮初入门的实践者解惑。最后的三分之一(24-30）开始触及源远流长的西方哲学传统，若要细究细察追本穷源，对于不熟悉西方哲学传统的读者，一个学说一个名称就可以扯一藤子瓜，而此书从头到尾无注释，想要全盘了解至少要参考一部西方哲学史外加一本西方语言学史。\n简言之，周老师将整本书分成了三个部分：\n部分 章节 阅读难度 1 1-10 浅显易懂 2 11-23 难易适中 3 24-30 难度稍高 参考这样的标准，就能快速根据自己对人资语言学的理解选择相应的部分展开阅读。\n不仅如此，译者还对全书给出了对应的分类解析：\n本书一开始便带领读者优游无所不在的譬喻，使读者觉得无拘无束，但其缺点便是散。本书共分三十章，而苏以文(2005），《隐喻与认知》将其概括为十一单元而加以论述，其与本书章节一一对应如下，颇能抓住本书的主线：\n如果我们对《我们赖以生存的隐喻》这本书不知道从哪里读起，就可以参考周世箴老师的意见，从难读或者主题来抽样阅读。\n又比如德国社会学家哈特穆特·罗萨（Hartmut Rosa）写了一本关于现代社会异化的社会批判著作《新异化的诞生》，中文版译者郑作彧老师在译者前言专门就这本书的读法进行了指导：\n这是一本篇幅不算长的书，但内容却颇为丰富。其中一项丰富之处在于，它至少适合于两种读者，从两种角度来阅读。一种是喜欢有点学理内涵，但又无力消化艰深内容的普通读者；另一种是喜爱钻研社会理论的专业社会学家。当然，不同的读者用不同的读法来品鉴这本书，滋味就会不太一样。\n\u0026hellip;\u0026hellip;\n因此我建议读者在阅读本书时，可以先从第一章和第三章读起。若尚有余力、且有兴趣的话，可以回过头来去挑战第二章。\n所以我们可以对照序言中的分析，对应自己的阅读偏好，按照郑老师的方法启动阅读。\n上述书本的作者小理查兹 · J. 霍耶尔、译者周世箴、郑作彧都是在情报分析领域、语言学、社会科学领域深耕多年的老师，他们就相当于行业专家，这些意见对于普通读者来说值得借鉴，所以我们就可以直接通过专家的意见进行抽样阅读。\n当我们对某些领域缺乏足够知识了解，需要借助在该领域有较高技能或知识水平的人进行评估或发表意见时使用这种抽样策略。使用专家抽样就能够大大降低试错成本，以相对科学的方法启动阅读，抓住书本核心。\n简单来说，专家抽样分为两个基本步骤：\n确定专家标准。 选择专家意见。 而在现实情境中，可能经常会碰到「伪专家」，比如很多电视网络媒体上会出现种种人，他们往往声称自己是某领域专家，但其意见极有可能存在各种偏见与谬误。如果盲目跟随，就会为其缴纳各种智商税。\n从阅读一本书的角度，如何规避这种现象？\n一个简单的识别策略就是审查建议者与作者是否为同行、建议者在这个领域的社会评价如何。\n以《认知天性》这本书为例，这是一本面向大众介绍如何有效学习的实证研究指南。\n中文版中出现了两篇推荐序，序一作者为樊登读书会创始人，序二作者是TED演讲中国引进人。\n而《认知天性》这本书的主要作者亨利·L·罗迪格三世（Henry L. Roediger III) 是研究人类学习和记忆领域的美国心理学家、华盛顿大学心理学教授，H指数124。毫无疑问，中文版的两位作序者身份和本书作者身份存在较大偏离。《认知天性》中文版请这两位作序，反而是借助他们在各自领域的影响力来推广这本书。从这本书核心章节确认的角度，其意见并无多大的参考价值。\n如果我们拿到的书并没有针对核心章节推荐的信息，也没有找到具体的专家对阅读的推荐，应该如何处理呢？\n我们可以通过人工智能来解决，比如用ChatGPT帮助我们推荐优先阅读的章节。\n假设我们现在要阅读《改变》这本书，我们可以将整本书电子版提交给GPT，然后向GPT请教：\nGPT如是回答：\n这样，我们就相当于：\n让GPT扮演了《改变》的作者Paul Watzlawick 模拟了一个前提（读者没有足够的时间） 让他重点推荐优先阅读的章节 从而获得了我们想要的答案：第一章、第三章和第七章。\n更高阶的身份判断，可以参考阳老师在《聪明的阅读者》第十章中提到对作者的社会评价方面的叙述，它能够帮助我们识别作者、作序者等身份角色的高低，进而判断谁的建议更值得我们参考。\n3 # 专家抽样的图示可以简化如下：\n通过上述拆解发现，专家抽样的优势在于通过快速采纳意见进入阅读状态，节约试错成本。与之对应的缺陷是如果缺少对专家身份的审核，可能陷入抽样的偏差。所以在专家抽样之后，建议结合其他概率抽样方式进行验证，以规避可能出现的问题。\n"},{"id":14,"href":"/docs/example/Ch5.%E6%8A%BD%E6%A0%B7%E9%98%85%E8%AF%BB/%E9%9B%AA%E7%90%83%E6%8A%BD%E6%A0%B7/","title":"07.雪球抽样","section":"Ch5.抽样阅读","content":" 如何对一本书进行雪球抽样阅读？ # 1 # 我们刚刚介绍的便利抽样、专家抽样都是有意识放大身边可以利用的资源，协助我们快速抽样，尽快进入阅读状态。除此之外，还有一种快速进入阅读状态的阅读方法就是使用雪球抽样阅读。\n我们知道，一粒很小的雪球在雪地里不停的翻滚，它会变得越来越大。将滚雪球效应运用到阅读领域，我们可以假设，如果开始阅读一个章节，那么随着章节知识关联的越来越多，我们阅读的章数就会越来越多，直到达到我们想要阅读的章节数为止。\n什么是雪球抽样阅读？\n简单理解，就是将一本书从任一一个感兴趣的章节开始阅读，然后从这个章节中找到与之相关的感兴趣的其他章节信息，然后顺着这些信息链接阅读这一章节，再从该章节中寻找作者提及的其他章节\u0026hellip;\u0026hellip;如此一轮一轮像滚雪球般持续读下去，一直读到自己设定的阅读样章饱和值。\n2 # 比如我拿到《心理与行为科学研究方法》这本书，全书一共14章，我打算选三章阅读。我大概浏览了一下目录，我想着研究方法比较重要的方式之一是科学实验，而这本书的第9章正好是「做实验」，所以我就直接从第9章开始阅读。\n在阅读过程中我发现书中提到「操作自变量」这个标题，并写到：\n为了操作自变量，你必须构造变量的操作定义（见第4章）。也就是说，你必须把概念变量转换成一组操作，即要呈现给研究参与择的特定指导语、事件和刺激。\n这一句话包含了一些抽象的术语比如「变量」、「特定指导语」、「事件」、「刺激」等，所以初读起来并不是很明白。但这里作者给到了相关信息在第4章的提示，所以我暂停阅读第9章，翻回第4章里面，找到了「变量」以及「变量的操作定义」文段：\n这时候我就可以尝试对这两个关键概念引入文本细读方法进行阅读，搞清楚什么是变量以及变量的操作定义是什么。\n在阅读第4章的过程中，我想，我现在阅读的是「变量」有关的知识，那么，「变量」和我之前阅读的第9章「实验」有什么关联关系呢？\n我发现4.5小节作者提到用「非实验法」这个与实验相关的概念：\n用非实验法，难以决定哪个变量引起了第一个变量的变化。换言之，实际上，我们不能说健身运动引起了焦虑减少。虽然对于这种因果模式的理由似乎是合理的，但是可出现相反模式的理由也是合理的，即或许是高焦虑使人减少了健身运动。这里的问题是时间先后问题；这对于做出因果推论是非常重要的（见第1章）。\n读完这句话，我觉得它非常重要，因为我们经常在日常生活中习惯作一些线性因果推论， 比如很多人认为风湿病或感冒是由于天气变化引起的，事实上它们之间只存在相关性，但并不意味着天气变化一定会引发风湿病或感冒。\n作者在这里提到了第1章的相关信息，这就引导我继续翻到本书的第1章，去查找实验的因果推论的相关知识：\n作者果真在这里又提及第4章：\n有关备择解释的第三点是非常重要的：假设观看大量电视暴力的儿童比不看电视暴力的儿童更多地一个人留在家中。在这种情况中，攻击性能够具有备择解释：缺乏父母监督。第4章将进一步讨论因果关系。\n这相当于又提醒我回到第4章去更深入的复习与因果关系、自变量等相关知识点。\n在自变量介绍中，4.3小节提到了按操作定义变量的两个重要优点：\n这里对其优点解释的比较清晰，那么我想，操作定义有没有缺点呢？\n我发现《心理与行为科学研究方法》这本书并没有任何介绍，于是我通过身边的另一本介绍实验的书《行为科学研究方法》中提到了操作定义的局限性：\n这时候，我对「操作性定义」就有了更加全面的认知。\n我们尝试将前面的阅读过程汇总起来解析一下：\n# 书目 阅读章节 备注 1 《心理与行为科学研究方法》 第九章 个人兴趣驱使 2 《心理与行为科学研究方法》 第九章理解「操作自变量」 书中出现「变量操作定义参见第一章」的提示 3 《心理与行为科学研究方法》 第四章 理解「变量」和「变量的操作定义」 4 《心理与行为科学研究方法》 第四章 非实验法的因果推论见第一章 5 《心理与行为科学研究方法》 第一章 因果关系满足的三个条件 6 《心理与行为科学研究方法》 第四章 操作定义变量的优点 7 《行为科学研究方法》 第四章 操作定义变量的缺点 最早我只是相对随性的选择了《心理与行为科学研究方法》的第9章去阅读，但随着阅读章节中对不同章节的文本提示，我实现了不同章节甚至不同书本的阅读跳转，但整体又围绕着一条主线去展开阅读，最终我阅读了四个章节，达到了最初设定的「读三章」的要求，这就是雪球抽样。\n雪球抽样的案例图示：\n需要注意的是，雪球抽样阅读中一般会设定一个阅读章节的「饱和值」，即我们针对这本书使用滚雪球到底要滚到什么程度停止继续滚？关于这个饱和值的设定，有两种常见的做法：\n提前设定饱和值： 在抽样阅读开始之前，我们根据研究自己的阅读目的、经验、现实条件等预先设定一个要滚雪球章节的饱和值。换句话说我们提前设定了雪球抽样的结束点。 过程中确定饱和值： 在抽样阅读过程中动态确定饱和值。比如我们在雪球抽样的过程中，发现抽中的章节内容开始重复或者不能再为我们提供需要的信息时，我们就随着抽样的状态而设定停止点。 在实际操作中，不论那种饱和值，都是基于我们的主观设定，目标都是帮助我们更加深入的理解书本内容。\n3 # 通过上述抽样实践我们发现，雪球抽样有一些优点也有一些不足：\n优点 # 从最开始第一次的样章选择，再到每次阅读时的章节跳转方向以及后续章节的跳转选择，都有相对较高的自由灵活度，比如某一章中同时提到了多个其他章节的介绍，阅读者也可以根据自己的需求和喜好来决定具体跳转到哪一章。\n此外，雪球抽样主要依赖于对所选择的书本章节，并不需要从书本之外的信息入手去分析或预测，这样就大大降低了抽样成本，操作便捷迅速。\n不足 # 由于雪球抽样阅读并非概率抽样，最开始选择的章节并不一定与整本书核心章节强相关，所以与之关联的后续章节可能与本书权重章节偏离较远，最终可能只能抽取到一部分章节，从而导致抽样偏差。\n雪球抽样主要依赖于选定章节内的推荐或介绍线来次序抽样，但如果选定章节对其他章节介绍较少甚至没有，就很难将雪球抽样延续成功，这个不足体现了雪球抽样阅读过程中读者对雪球延续的主导权相对较低。所以它提醒我们，可以尝试在雪球抽样过程中主动叠加其他抽样方法，来强化雪球抽样的精准度与持续度。\n"},{"id":15,"href":"/docs/example/Ch5.%E6%8A%BD%E6%A0%B7%E9%98%85%E8%AF%BB/%E9%85%8D%E9%A2%9D%E6%8A%BD%E6%A0%B7/","title":"08.配额抽样","section":"Ch5.抽样阅读","content":" 如何对一本书进行配额抽样阅读？ # 1 # 前面我们学习了分层抽样，理解了分层抽样的三个基本步骤：\n将全书的章节进行分组 对各组章节进行随机抽样 汇总抽样的章节展开阅读 在这个过程中的第二步，分层抽样遵循的是随机性，确保分组后的每个章节都有相等的概率被选中，这种方法的优势在于它减少了抽样偏差，提高了抽中样章在组内的代表性，避免认人为干预。但在现实阅读情境中，我们主观上可能对刚分好层的章节产生一定兴趣或需求，我们不需要在通过随机抽样的方式，而是根据自己的兴趣或我们拥有的便利条件等方式直接选取相应的章节开始阅读，这就是配额抽样与分层抽样的关键区别。\n换句话说，配额抽样是一种非概率抽样方法，我们将整本书划分为基于特定特征或主题的多个子群体（层）后，根据每个子群体在整体中的重要性或比重，人为地选择一定数量的章节进行阅读。\n配额抽样阅读的使用前提 # 配额阅读抽样往往在下述前提下使用：\n对某本书感兴趣，但是对这本书并没有太细致的了解。 阅读的时间与精力比较有限，没有阅读的充裕时间或情境，但又特别想阅读某些书。 尚不太具备复杂概率抽样或复杂非概率抽样的前提条件。比如没有找到专家对某本书的阅读建议或者对分层抽样方法不太熟悉。 2 # 配额抽样简单来说可以分为三步：\n1. 将全书分成不同的层级 # 由于配额抽样是一种非概率的抽样方法，所以在整个过程中，我们的主观意识起到了主要引领作用比如豆瓣网友@行动社交找潇潇 对《聪明的阅读者》一书的书评第一句话是这样的：\n这种阅读策略就可以简单理解她采用了配额抽样的阅读思路 —— 将《聪明的阅读者》分成卡片类与非卡片类两组，这就是一种简单的分层。\n又比如《儿童心理学》这本书，通过查看目录我们可以将其简单归类为「情境学习」和「知识学习」两个主要维度：\n类似这种分类相比分层阅读的分类来说，会更加主观、灵活且快速。当然我们在这一步还可以借助便利抽样、专家抽样的方式对全书进行分组。\n2. 为不同的层级确认一个配额 # 依旧以前面的《儿童心理学》为例，如果按照原来的分层阅读抽样的话，我们接下来就要对「情境学习」和「知识学习」两个章群进行随机抽样，但在配额抽样中，我们可以更加主观地去决定配额 —— 我们一共阅读3章。而这里的「3」，就是我们对《儿童心理学》这本书的主观配额设定。\n接下来，我们对于前面的「3」就要在「情境学习」和「知识学习」两个章组中去分解，比如我们主观上决定阅读第三章和第四章、而对于「知识学习」组，我们主观上决定第五章，然后我们就开始阅读自己制定的章节了。\n除此之外，我们在这一步的操作还可以借助便利抽样、专家抽样、雪球抽样等方式进行配额。所以整个配额抽样在过程中会比较灵活、自主且主观。\n配额抽样可以用如下图示简化理解：\n3 # 到这里，我们会发现配额阅读抽样与分层阅读抽样都会对书本进行分类，接着抽取相应的章节开始阅读。但他们之间的区别在于，分层阅读抽样在分层之后通过简单随机抽样来确认章节被平均抽中的可能性，而配额抽样则是依赖于读者自己的偏好来选择 —— 从最开始的全书分类、到分好类之后的配额、再到对配额章节的选择，可以便利抽样、可以专家抽样也可以雪球抽样，整个过程体现出明显的读者个人倾向，这也是配额抽样的重要特征。\n通过上述分析我们发现，配额阅读抽样并不需要严谨的抽样规则，整个操作过程更加主观、便捷。但配额抽样也会遭遇到一些问题，如果我们无法清晰的给到全书的分层标准，就无法清晰对全书分层进而无法配额。此外，又与配额抽样依赖于读者本人的自由选择，所以配额可能会受到阅读者本人认知偏见的影响，比如阅读者的阅读偏好、阅读者希望尽快通过阅读找到某些问题的答案，这样就无法将配额抽样的章节覆盖到整本书核心知识的理解上。\n"},{"id":16,"href":"/docs/example/Ch5.%E6%8A%BD%E6%A0%B7%E9%98%85%E8%AF%BB/%E7%BB%BC%E5%90%88%E7%90%86%E8%A7%A3/","title":"09.综合理解","section":"Ch5.抽样阅读","content":" 1 # 无论是概率抽样阅读还是非概率抽样阅读，我们的目的都是主动对阅读的书目做出假设：\n抽样方法 假设 简单随机抽样 80/20法则、借助随机性可以消除章节选择偏差 等距抽样 80/20法则、借助章节之间的等距抽样可以消除章节选择偏差 分层抽样 书中的不同章节可以组成多个彼此独立的章群、借助随机性可以消除章节选择偏差 整群抽样 书中的不同章节可以组成多个彼此独立的章群、全部阅读其中一个章群可以减少书中内容的理解偏差 便利抽样 身边有可以帮助促进对阅读的书进行理解的情境 专家抽样 当自己没有足够判断力时可以借助专家意见对全书的重点进行理解 雪球抽样 书中的章节与章节之间是有关联的，利用这种关联可以逐步加深对书中内容的理解 配额抽样 借助自己的判断叠加非随机方式（便利/专家/雪球）可以帮助深入理解书中的内容 所以，通过在阅读之前就预设「假设」，能够帮助我们更快启动阅读行为去验证种种假设。在以上抽样方法中，简单随机抽样阅读、等距抽样阅读、整群抽样阅读、分层抽样阅读都强调章节选择的随机性。概率抽样阅读旨在以客观角度引入随机化选择消除人为偏见，所以它体现了书本所有章节都有被选择到的公平机会。简单来说，非概率抽样的主要决定因素是「工具」。\n概率抽样阅读简化图示如下： # 选择概率抽样阅读的前提 # 阅读者希望最大程度减少对全书的抽样偏差，规避人为抽样的样章导致对全书代表性过高或代表性不足的风险。 当一本书包含的主题、叙事、人物、情节等非常多样化时，使用概率抽样能够最大幅度增加代表全书的样本章节。 而诸如便利抽样阅读、专家抽样阅读、雪球抽样阅读和配额抽样阅读，都属于非概率的抽样方法，它们不考虑全书章节都被平均选中的可能性，反而更依赖阅读者本人的主观意愿来选择样本。比如阅读者在阅读之前已经设定的相对明确的阅读目标、阅读者已有的知识和经验、阅读者的主观判断、阅读者当前拥有的时空情境、人际、情绪等阅读条件的便利性等。简单来说，非概率抽样的主要决定因素是「人」。\n非概率抽样阅读简化图示如下： # 2 # 因为非概率章节抽样不考虑整本书的所有章节，所以在下述情形更可能采取非概率抽样方法：\n阅读者在阅读之前已经明确希望对某些章节进行阅读而不希望对全书展开理解。 阅读者希望对书中某一个章节做一些试探性的阅读，看看能不能激活自己的阅读兴趣。 阅读者当前所拥有的抽样条件相当有限，不希望自己花太多时间精力就能快速找到章节。 概率抽样阅读与非概率抽样阅读的整体区别如下：\n要点 概率抽样阅读 非概率抽样阅读 抽取的样章对全书代表的程度 ↓ ↑ 抽样过程中对阅读者已有知识或经验的依赖程度 ↓ ↑ 抽样过程中对计算机（随机生成数据）的依赖程度 ↑ ↓ 抽样过程中对阅读者当前拥有的时空/人际/情绪等情境的依赖程度 ↓ ↑ 整体抽样的时间心力成本消耗程度 ↑ ↓ "},{"id":17,"href":"/posts/creating-a-new-theme/","title":"Creating a New Theme","section":"Blog","content":" Introduction # This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I\u0026rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won\u0026rsquo;t cover using CSS to style your theme.\nWe\u0026rsquo;ll start with creating a new site with a very basic template. Then we\u0026rsquo;ll add in a few pages and posts. With small variations on that, you will be able to create many different types of web sites.\nIn this tutorial, commands that you enter will start with the \u0026ldquo;$\u0026rdquo; prompt. The output will follow. Lines that start with \u0026ldquo;#\u0026rdquo; are comments that I\u0026rsquo;ve added to explain a point. When I show updates to a file, the \u0026ldquo;:wq\u0026rdquo; on the last line means to save the file.\nHere\u0026rsquo;s an example:\n## this is a comment $ echo this is a command this is a command ## edit the file $ vi foo.md +++ date = \u0026#34;2014-09-28\u0026#34; title = \u0026#34;creating a new theme\u0026#34; +++ bah and humbug :wq ## show it $ cat foo.md +++ date = \u0026#34;2014-09-28\u0026#34; title = \u0026#34;creating a new theme\u0026#34; +++ bah and humbug $ Some Definitions # There are a few concepts that you need to understand before creating a theme.\nSkins # Skins are the files responsible for the look and feel of your site. It’s the CSS that controls colors and fonts, it’s the Javascript that determines actions and reactions. It’s also the rules that Hugo uses to transform your content into the HTML that the site will serve to visitors.\nYou have two ways to create a skin. The simplest way is to create it in the layouts/ directory. If you do, then you don’t have to worry about configuring Hugo to recognize it. The first place that Hugo will look for rules and files is in the layouts/ directory so it will always find the skin.\nYour second choice is to create it in a sub-directory of the themes/ directory. If you do, then you must always tell Hugo where to search for the skin. It’s extra work, though, so why bother with it?\nThe difference between creating a skin in layouts/ and creating it in themes/ is very subtle. A skin in layouts/ can’t be customized without updating the templates and static files that it is built from. A skin created in themes/, on the other hand, can be and that makes it easier for other people to use it.\nThe rest of this tutorial will call a skin created in the themes/ directory a theme.\nNote that you can use this tutorial to create a skin in the layouts/ directory if you wish to. The main difference will be that you won’t need to update the site’s configuration file to use a theme.\nThe Home Page # The home page, or landing page, is the first page that many visitors to a site see. It is the index.html file in the root directory of the web site. Since Hugo writes files to the public/ directory, our home page is public/index.html.\nSite Configuration File # When Hugo runs, it looks for a configuration file that contains settings that override default values for the entire site. The file can use TOML, YAML, or JSON. I prefer to use TOML for my configuration files. If you prefer to use JSON or YAML, you’ll need to translate my examples. You’ll also need to change the name of the file since Hugo uses the extension to determine how to process it.\nHugo translates Markdown files into HTML. By default, Hugo expects to find Markdown files in your content/ directory and template files in your themes/ directory. It will create HTML files in your public/ directory. You can change this by specifying alternate locations in the configuration file.\nContent # Content is stored in text files that contain two sections. The first section is the “front matter,” which is the meta-information on the content. The second section contains Markdown that will be converted to HTML.\nFront Matter # The front matter is information about the content. Like the configuration file, it can be written in TOML, YAML, or JSON. Unlike the configuration file, Hugo doesn’t use the file’s extension to know the format. It looks for markers to signal the type. TOML is surrounded by “+++”, YAML by “---”, and JSON is enclosed in curly braces. I prefer to use TOML, so you’ll need to translate my examples if you prefer YAML or JSON.\nThe information in the front matter is passed into the template before the content is rendered into HTML.\nMarkdown # Content is written in Markdown which makes it easier to create the content. Hugo runs the content through a Markdown engine to create the HTML which will be written to the output file.\nTemplate Files # Hugo uses template files to render content into HTML. Template files are a bridge between the content and presentation. Rules in the template define what content is published, where it\u0026rsquo;s published to, and how it will rendered to the HTML file. The template guides the presentation by specifying the style to use.\nThere are three types of templates: single, list, and partial. Each type takes a bit of content as input and transforms it based on the commands in the template.\nHugo uses its knowledge of the content to find the template file used to render the content. If it can’t find a template that is an exact match for the content, it will shift up a level and search from there. It will continue to do so until it finds a matching template or runs out of templates to try. If it can’t find a template, it will use the default template for the site.\nPlease note that you can use the front matter to influence Hugo’s choice of templates.\nSingle Template # A single template is used to render a single piece of content. For example, an article or post would be a single piece of content and use a single template.\nList Template # A list template renders a group of related content. That could be a summary of recent postings or all articles in a category. List templates can contain multiple groups.\nThe homepage template is a special type of list template. Hugo assumes that the home page of your site will act as the portal for the rest of the content in the site.\nPartial Template # A partial template is a template that can be included in other templates. Partial templates must be called using the “partial” template command. They are very handy for rolling up common behavior. For example, your site may have a banner that all pages use. Instead of copying the text of the banner into every single and list template, you could create a partial with the banner in it. That way if you decide to change the banner, you only have to change the partial template.\nCreate a New Site # Let\u0026rsquo;s use Hugo to create a new web site. I\u0026rsquo;m a Mac user, so I\u0026rsquo;ll create mine in my home directory, in the Sites folder. If you\u0026rsquo;re using Linux, you might have to create the folder first.\nThe \u0026ldquo;new site\u0026rdquo; command will create a skeleton of a site. It will give you the basic directory structure and a useable configuration file.\n$ hugo new site ~/Sites/zafta $ cd ~/Sites/zafta $ ls -l total 8 drwxr-xr-x 7 quoha staff 238 Sep 29 16:49 . drwxr-xr-x 3 quoha staff 102 Sep 29 16:49 .. drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static $ Take a look in the content/ directory to confirm that it is empty.\nThe other directories (archetypes/, layouts/, and static/) are used when customizing a theme. That\u0026rsquo;s a topic for a different tutorial, so please ignore them for now.\nGenerate the HTML For the New Site # Running the hugo command with no options will read all the available content and generate the HTML files. It will also copy all static files (that\u0026rsquo;s everything that\u0026rsquo;s not content). Since we have an empty site, it won\u0026rsquo;t do much, but it will do it very quickly.\n$ hugo --verbose INFO: 2014/09/29 Using config file: config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $ The \u0026ldquo;--verbose\u0026rdquo; flag gives extra information that will be helpful when we build the template. Every line of the output that starts with \u0026ldquo;INFO:\u0026rdquo; or \u0026ldquo;WARN:\u0026rdquo; is present because we used that flag. The lines that start with \u0026ldquo;WARN:\u0026rdquo; are warning messages. We\u0026rsquo;ll go over them later.\nWe can verify that the command worked by looking at the directory again.\n$ ls -l total 8 drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static $ See that new public/ directory? Hugo placed all generated content there. When you\u0026rsquo;re ready to publish your web site, that\u0026rsquo;s the place to start. For now, though, let\u0026rsquo;s just confirm that we have what we\u0026rsquo;d expect from a site with no content.\n$ ls -l public total 16 -rw-r--r-- 1 quoha staff 416 Sep 29 17:02 index.xml -rw-r--r-- 1 quoha staff 262 Sep 29 17:02 sitemap.xml $ Hugo created two XML files, which is standard, but there are no HTML files.\nTest the New Site # Verify that you can run the built-in web server. It will dramatically shorten your development cycle if you do. Start it by running the \u0026ldquo;server\u0026rdquo; command. If it is successful, you will see output similar to the following:\n$ hugo server --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms Serving pages from /Users/quoha/Sites/zafta/public Web Server is available at http://localhost:1313 Press Ctrl+C to stop Connect to the listed URL (it\u0026rsquo;s on the line that starts with \u0026ldquo;Web Server\u0026rdquo;). If everything is working correctly, you should get a page that shows the following:\nindex.xml sitemap.xml That\u0026rsquo;s a listing of your public/ directory. Hugo didn\u0026rsquo;t create a home page because our site has no content. When there\u0026rsquo;s no index.html file in a directory, the server lists the files in the directory, which is what you should see in your browser.\nLet’s go back and look at those warnings again.\nWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] That second warning is easier to explain. We haven’t created a template to be used to generate “page not found errors.” The 404 message is a topic for a separate tutorial.\nNow for the first warning. It is for the home page. You can tell because the first layout that it looked for was “index.html.” That’s only used by the home page.\nI like that the verbose flag causes Hugo to list the files that it\u0026rsquo;s searching for. For the home page, they are index.html, _default/list.html, and _default/single.html. There are some rules that we\u0026rsquo;ll cover later that explain the names and paths. For now, just remember that Hugo couldn\u0026rsquo;t find a template for the home page and it told you so.\nAt this point, you\u0026rsquo;ve got a working installation and site that we can build upon. All that’s left is to add some content and a theme to display it.\nCreate a New Theme # Hugo doesn\u0026rsquo;t ship with a default theme. There are a few available (I counted a dozen when I first installed Hugo) and Hugo comes with a command to create new themes.\nWe\u0026rsquo;re going to create a new theme called \u0026ldquo;zafta.\u0026rdquo; Since the goal of this tutorial is to show you how to fill out the files to pull in your content, the theme will not contain any CSS. In other words, ugly but functional.\nAll themes have opinions on content and layout. For example, Zafta uses \u0026ldquo;post\u0026rdquo; over \u0026ldquo;blog\u0026rdquo;. Strong opinions make for simpler templates but differing opinions make it tougher to use themes. When you build a theme, consider using the terms that other themes do.\nCreate a Skeleton # Use the hugo \u0026ldquo;new\u0026rdquo; command to create the skeleton of a theme. This creates the directory structure and places empty files for you to fill out.\n$ hugo new theme zafta $ ls -l total 8 drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static drwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes $ find themes -type f | xargs ls -l -rw-r--r-- 1 quoha staff 1081 Sep 29 17:31 themes/zafta/LICENSE.md -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/archetypes/default.md -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html -rw-r--r-- 1 quoha staff 93 Sep 29 17:31 themes/zafta/theme.toml $ The skeleton includes templates (the files ending in .html), license file, a description of your theme (the theme.toml file), and an empty archetype.\nPlease take a minute to fill out the theme.toml and LICENSE.md files. They\u0026rsquo;re optional, but if you\u0026rsquo;re going to be distributing your theme, it tells the world who to praise (or blame). It\u0026rsquo;s also nice to declare the license so that people will know how they can use the theme.\n$ vi themes/zafta/theme.toml author = \u0026#34;michael d henderson\u0026#34; description = \u0026#34;a minimal working template\u0026#34; license = \u0026#34;MIT\u0026#34; name = \u0026#34;zafta\u0026#34; source_repo = \u0026#34;\u0026#34; tags = [\u0026#34;tags\u0026#34;, \u0026#34;categories\u0026#34;] :wq ## also edit themes/zafta/LICENSE.md and change ## the bit that says \u0026#34;YOUR_NAME_HERE\u0026#34; Note that the the skeleton\u0026rsquo;s template files are empty. Don\u0026rsquo;t worry, we\u0026rsquo;ll be changing that shortly.\n$ find themes/zafta -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html $ Update the Configuration File to Use the Theme # Now that we\u0026rsquo;ve got a theme to work with, it\u0026rsquo;s a good idea to add the theme name to the configuration file. This is optional, because you can always add \u0026ldquo;-t zafta\u0026rdquo; on all your commands. I like to put it the configuration file because I like shorter command lines. If you don\u0026rsquo;t put it in the configuration file or specify it on the command line, you won\u0026rsquo;t use the template that you\u0026rsquo;re expecting to.\nEdit the file to add the theme, add a title for the site, and specify that all of our content will use the TOML format.\n$ vi config.toml theme = \u0026#34;zafta\u0026#34; baseurl = \u0026#34;\u0026#34; languageCode = \u0026#34;en-us\u0026#34; title = \u0026#34;zafta - totally refreshing\u0026#34; MetaDataFormat = \u0026#34;toml\u0026#34; :wq $ Generate the Site # Now that we have an empty theme, let\u0026rsquo;s generate the site again.\n$ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $ Did you notice that the output is different? The warning message for the home page has disappeared and we have an additional information line saying that Hugo is syncing from the theme\u0026rsquo;s directory.\nLet\u0026rsquo;s check the public/ directory to see what Hugo\u0026rsquo;s created.\n$ ls -l public total 16 drwxr-xr-x 2 quoha staff 68 Sep 29 17:56 css -rw-r--r-- 1 quoha staff 0 Sep 29 17:56 index.html -rw-r--r-- 1 quoha staff 407 Sep 29 17:56 index.xml drwxr-xr-x 2 quoha staff 68 Sep 29 17:56 js -rw-r--r-- 1 quoha staff 243 Sep 29 17:56 sitemap.xml $ Notice four things:\nHugo created a home page. This is the file public/index.html. Hugo created a css/ directory. Hugo created a js/ directory. Hugo claimed that it created 0 pages. It created a file and copied over static files, but didn\u0026rsquo;t create any pages. That\u0026rsquo;s because it considers a \u0026ldquo;page\u0026rdquo; to be a file created directly from a content file. It doesn\u0026rsquo;t count things like the index.html files that it creates automatically. The Home Page # Hugo supports many different types of templates. The home page is special because it gets its own type of template and its own template file. The file, layouts/index.html, is used to generate the HTML for the home page. The Hugo documentation says that this is the only required template, but that depends. Hugo\u0026rsquo;s warning message shows that it looks for three different templates:\nWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] If it can\u0026rsquo;t find any of these, it completely skips creating the home page. We noticed that when we built the site without having a theme installed.\nWhen Hugo created our theme, it created an empty home page template. Now, when we build the site, Hugo finds the template and uses it to generate the HTML for the home page. Since the template file is empty, the HTML file is empty, too. If the template had any rules in it, then Hugo would have used them to generate the home page.\n$ find . -name index.html | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 20:21 ./public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 ./themes/zafta/layouts/index.html $ The Magic of Static # Hugo does two things when generating the site. It uses templates to transform content into HTML and it copies static files into the site. Unlike content, static files are not transformed. They are copied exactly as they are.\nHugo assumes that your site will use both CSS and JavaScript, so it creates directories in your theme to hold them. Remember opinions? Well, Hugo\u0026rsquo;s opinion is that you\u0026rsquo;ll store your CSS in a directory named css/ and your JavaScript in a directory named js/. If you don\u0026rsquo;t like that, you can change the directory names in your theme directory or even delete them completely. Hugo\u0026rsquo;s nice enough to offer its opinion, then behave nicely if you disagree.\n$ find themes/zafta -type d | xargs ls -ld drwxr-xr-x 7 quoha staff 238 Sep 29 17:38 themes/zafta drwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes/zafta/archetypes drwxr-xr-x 5 quoha staff 170 Sep 29 17:31 themes/zafta/layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/_default drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/partials drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/static drwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/css drwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/js $ The Theme Development Cycle # When you\u0026rsquo;re working on a theme, you will make changes in the theme\u0026rsquo;s directory, rebuild the site, and check your changes in the browser. Hugo makes this very easy:\nPurge the public/ directory. Run the built in web server in watch mode. Open your site in a browser. Update the theme. Glance at your browser window to see changes. Return to step 4. I’ll throw in one more opinion: never work on a theme on a live site. Always work on a copy of your site. Make changes to your theme, test them, then copy them up to your site. For added safety, use a tool like Git to keep a revision history of your content and your theme. Believe me when I say that it is too easy to lose both your mind and your changes.\nCheck the main Hugo site for information on using Git with Hugo.\nPurge the public/ Directory # When generating the site, Hugo will create new files and update existing ones in the public/ directory. It will not delete files that are no longer used. For example, files that were created in the wrong directory or with the wrong title will remain. If you leave them, you might get confused by them later. I recommend cleaning out your site prior to generating it.\nNote: If you\u0026rsquo;re building on an SSD, you should ignore this. Churning on a SSD can be costly.\nHugo\u0026rsquo;s Watch Option # Hugo\u0026rsquo;s \u0026ldquo;--watch\u0026rdquo; option will monitor the content/ and your theme directories for changes and rebuild the site automatically.\nLive Reload # Hugo\u0026rsquo;s built in web server supports live reload. As pages are saved on the server, the browser is told to refresh the page. Usually, this happens faster than you can say, \u0026ldquo;Wow, that\u0026rsquo;s totally amazing.\u0026rdquo;\nDevelopment Commands # Use the following commands as the basis for your workflow.\n## purge old files. hugo will recreate the public directory. ## $ rm -rf public ## ## run hugo in watch mode ## $ hugo server --watch --verbose Here\u0026rsquo;s sample output showing Hugo detecting a change to the template for the home page. Once generated, the web browser automatically reloaded the page. I\u0026rsquo;ve said this before, it\u0026rsquo;s amazing.\n$ rm -rf public $ hugo server --watch --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms Watching for changes in /Users/quoha/Sites/zafta/content Serving pages from /Users/quoha/Sites/zafta/public Web Server is available at http://localhost:1313 Press Ctrl+C to stop INFO: 2014/09/29 File System Event: [\u0026#34;/Users/quoha/Sites/zafta/themes/zafta/layouts/index.html\u0026#34;: MODIFY|ATTRIB] Change detected, rebuilding site WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 1 ms Update the Home Page Template # The home page is one of a few special pages that Hugo creates automatically. As mentioned earlier, it looks for one of three files in the theme\u0026rsquo;s layout/ directory:\nindex.html _default/list.html _default/single.html We could update one of the default templates, but a good design decision is to update the most specific template available. That\u0026rsquo;s not a hard and fast rule (in fact, we\u0026rsquo;ll break it a few times in this tutorial), but it is a good generalization.\nMake a Static Home Page # Right now, that page is empty because we don\u0026rsquo;t have any content and we don\u0026rsquo;t have any logic in the template. Let\u0026rsquo;s change that by adding some text to the template.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq $ Build the web site and then verify the results.\n$ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 78 Sep 29 21:26 public/index.html $ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;/html\u0026gt; Live Reload # Note: If you\u0026rsquo;re running the server with the --watch option, you\u0026rsquo;ll see different content in the file:\n$ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;script\u0026gt;document.write(\u0026#39;\u0026lt;script src=\u0026#34;http://\u0026#39; + (location.host || \u0026#39;localhost\u0026#39;).split(\u0026#39;:\u0026#39;)[0] + \u0026#39;:1313/livereload.js?mindelay=10\u0026#34;\u0026gt;\u0026lt;/\u0026#39; + \u0026#39;script\u0026gt;\u0026#39;)\u0026lt;/script\u0026gt;\u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; When you use --watch, the Live Reload script is added by Hugo. Look for live reload in the documentation to see what it does and how to disable it.\nBuild a \u0026ldquo;Dynamic\u0026rdquo; Home Page # \u0026ldquo;Dynamic home page?\u0026rdquo; Hugo\u0026rsquo;s a static web site generator, so this seems an odd thing to say. I mean let\u0026rsquo;s have the home page automatically reflect the content in the site every time Hugo builds it. We\u0026rsquo;ll use iteration in the template to do that.\nCreate New Posts # Now that we have the home page generating static content, let\u0026rsquo;s add some content to the site. We\u0026rsquo;ll display these posts as a list on the home page and on their own page, too.\nHugo has a command to generate a skeleton post, just like it does for sites and themes.\n$ hugo --verbose new post/first.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/first.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/default.md ERROR: 2014/09/29 Unable to Cast \u0026lt;nil\u0026gt; to map[string]interface{} $ That wasn\u0026rsquo;t very nice, was it?\nThe \u0026ldquo;new\u0026rdquo; command uses an archetype to create the post file. Hugo created an empty default archetype file, but that causes an error when there\u0026rsquo;s a theme. For me, the workaround was to create an archetypes file specifically for the post type.\n$ vi themes/zafta/archetypes/post.md +++ Description = \u0026#34;\u0026#34; Tags = [] Categories = [] +++ :wq $ find themes/zafta/archetypes -type f | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 21:53 themes/zafta/archetypes/default.md -rw-r--r-- 1 quoha staff 51 Sep 29 21:54 themes/zafta/archetypes/post.md $ hugo --verbose new post/first.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/first.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/first.md /Users/quoha/Sites/zafta/content/post/first.md created $ hugo --verbose new post/second.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/second.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/second.md /Users/quoha/Sites/zafta/content/post/second.md created $ ls -l content/post total 16 -rw-r--r-- 1 quoha staff 104 Sep 29 21:54 first.md -rw-r--r-- 1 quoha staff 105 Sep 29 21:57 second.md $ cat content/post/first.md +++ Categories = [] Description = \u0026#34;\u0026#34; Tags = [] date = \u0026#34;2014-09-29T21:54:53-05:00\u0026#34; title = \u0026#34;first\u0026#34; +++ my first post $ cat content/post/second.md +++ Categories = [] Description = \u0026#34;\u0026#34; Tags = [] date = \u0026#34;2014-09-29T21:57:09-05:00\u0026#34; title = \u0026#34;second\u0026#34; +++ my second post $ Build the web site and then verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026#34;category\u0026#34;:\u0026#34;categories\u0026#34;, \u0026#34;tag\u0026#34;:\u0026#34;tags\u0026#34;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ The output says that it created 2 pages. Those are our new posts:\n$ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 78 Sep 29 22:13 public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/second/index.html $ The new files are empty because because the templates used to generate the content are empty. The homepage doesn\u0026rsquo;t show the new content, either. We have to update the templates to add the posts.\nList and Single Templates # In Hugo, we have three major kinds of templates. There\u0026rsquo;s the home page template that we updated previously. It is used only by the home page. We also have \u0026ldquo;single\u0026rdquo; templates which are used to generate output for a single content file. We also have \u0026ldquo;list\u0026rdquo; templates that are used to group multiple pieces of content before generating output.\nGenerally speaking, list templates are named \u0026ldquo;list.html\u0026rdquo; and single templates are named \u0026ldquo;single.html.\u0026rdquo;\nThere are three other types of templates: partials, content views, and terms. We will not go into much detail on these.\nAdd Content to the Homepage # The home page will contain a list of posts. Let\u0026rsquo;s update its template to add the posts that we just created. The logic in the template will run every time we build the site.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; {{ range first 10 .Data.Pages }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq $ Hugo uses the Go template engine. That engine scans the template files for commands which are enclosed between \u0026ldquo;{{\u0026rdquo; and \u0026ldquo;}}\u0026rdquo;. In our template, the commands are:\nrange .Title end The \u0026ldquo;range\u0026rdquo; command is an iterator. We\u0026rsquo;re going to use it to go through the first ten pages. Every HTML file that Hugo creates is treated as a page, so looping through the list of pages will look at every file that will be created.\nThe \u0026ldquo;.Title\u0026rdquo; command prints the value of the \u0026ldquo;title\u0026rdquo; variable. Hugo pulls it from the front matter in the Markdown file.\nThe \u0026ldquo;end\u0026rdquo; command signals the end of the range iterator. The engine loops back to the top of the iteration when it finds \u0026ldquo;end.\u0026rdquo; Everything between the \u0026ldquo;range\u0026rdquo; and \u0026ldquo;end\u0026rdquo; is evaluated every time the engine goes through the iteration. In this file, that would cause the title from the first ten pages to be output as heading level one.\nIt\u0026rsquo;s helpful to remember that some variables, like .Data, are created before any output files. Hugo loads every content file into the variable and then gives the template a chance to process before creating the HTML files.\nBuild the web site and then verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026#34;tag\u0026#34;:\u0026#34;tags\u0026#34;, \u0026#34;category\u0026#34;:\u0026#34;categories\u0026#34;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 94 Sep 29 22:23 public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/second/index.html $ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;second\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;first\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ Congratulations, the home page shows the title of the two posts. The posts themselves are still empty, but let\u0026rsquo;s take a moment to appreciate what we\u0026rsquo;ve done. Your template now generates output dynamically. Believe it or not, by inserting the range command inside of those curly braces, you\u0026rsquo;ve learned everything you need to know to build a theme. All that\u0026rsquo;s really left is understanding which template will be used to generate each content file and becoming familiar with the commands for the template engine.\nAnd, if that were entirely true, this tutorial would be much shorter. There are a few things to know that will make creating a new template much easier. Don\u0026rsquo;t worry, though, that\u0026rsquo;s all to come.\nAdd Content to the Posts # We\u0026rsquo;re working with posts, which are in the content/post/ directory. That means that their section is \u0026ldquo;post\u0026rdquo; (and if we don\u0026rsquo;t do something weird, their type is also \u0026ldquo;post\u0026rdquo;).\nHugo uses the section and type to find the template file for every piece of content. Hugo will first look for a template file that matches the section or type name. If it can\u0026rsquo;t find one, then it will look in the _default/ directory. There are some twists that we\u0026rsquo;ll cover when we get to categories and tags, but for now we can assume that Hugo will try post/single.html, then _default/single.html.\nNow that we know the search rule, let\u0026rsquo;s see what we actually have available:\n$ find themes/zafta -name single.html | xargs ls -l -rw-r--r-- 1 quoha staff 132 Sep 29 17:31 themes/zafta/layouts/_default/single.html We could create a new template, post/single.html, or change the default. Since we don\u0026rsquo;t know of any other content types, let\u0026rsquo;s start with updating the default.\nRemember, any content that we haven\u0026rsquo;t created a template for will end up using this template. That can be good or bad. Bad because I know that we\u0026rsquo;re going to be adding different types of content and we\u0026rsquo;re going to end up undoing some of the changes we\u0026rsquo;ve made. It\u0026rsquo;s good because we\u0026rsquo;ll be able to see immediate results. It\u0026rsquo;s also good to start here because we can start to build the basic layout for the site. As we add more content types, we\u0026rsquo;ll refactor this file and move logic around. Hugo makes that fairly painless, so we\u0026rsquo;ll accept the cost and proceed.\nPlease see the Hugo documentation on template rendering for all the details on determining which template to use. And, as the docs mention, if you\u0026rsquo;re building a single page application (SPA) web site, you can delete all of the other templates and work with just the default single page. That\u0026rsquo;s a refreshing amount of joy right there.\nUpdate the Template File # $ vi themes/zafta/layouts/_default/single.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq $ Build the web site and verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026#34;tag\u0026#34;:\u0026#34;tags\u0026#34;, \u0026#34;category\u0026#34;:\u0026#34;categories\u0026#34;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 94 Sep 29 22:40 public/index.html -rw-r--r-- 1 quoha staff 125 Sep 29 22:40 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:40 public/post/index.html -rw-r--r-- 1 quoha staff 128 Sep 29 22:40 public/post/second/index.html $ cat public/post/first/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;first\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;first\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;my first post\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ cat public/post/second/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;second\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;second\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;my second post\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ Notice that the posts now have content. You can go to localhost:1313/post/first to verify.\nLinking to Content # The posts are on the home page. Let\u0026rsquo;s add a link from there to the post. Since this is the home page, we\u0026rsquo;ll update its template.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; {{ range first 10 .Data.Pages }} \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Build the web site and verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026#34;tag\u0026#34;:\u0026#34;tags\u0026#34;, \u0026#34;category\u0026#34;:\u0026#34;categories\u0026#34;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 149 Sep 29 22:44 public/index.html -rw-r--r-- 1 quoha staff 125 Sep 29 22:44 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:44 public/post/index.html -rw-r--r-- 1 quoha staff 128 Sep 29 22:44 public/post/second/index.html $ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;/post/second/\u0026#34;\u0026gt;second\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;/post/first/\u0026#34;\u0026gt;first\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ Create a Post Listing # We have the posts displaying on the home page and on their own page. We also have a file public/post/index.html that is empty. Let\u0026rsquo;s make it show a list of all posts (not just the first ten).\nWe need to decide which template to update. This will be a listing, so it should be a list template. Let\u0026rsquo;s take a quick look and see which list templates are available.\n$ find themes/zafta -name list.html | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html As with the single post, we have to decide to update _default/list.html or create post/list.html. We still don\u0026rsquo;t have multiple content types, so let\u0026rsquo;s stay consistent and update the default list template.\nCreating Top Level Pages # Let\u0026rsquo;s add an \u0026ldquo;about\u0026rdquo; page and display it at the top level (as opposed to a sub-level like we did with posts).\nThe default in Hugo is to use the directory structure of the content/ directory to guide the location of the generated html in the public/ directory. Let\u0026rsquo;s verify that by creating an \u0026ldquo;about\u0026rdquo; page at the top level:\n$ vi content/about.md +++ title = \u0026#34;about\u0026#34; description = \u0026#34;about this site\u0026#34; date = \u0026#34;2014-09-27\u0026#34; slug = \u0026#34;about time\u0026#34; +++ ## about us i\u0026#39;m speechless :wq Generate the web site and verify the results.\n$ find public -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-rw-r-- 1 mdhender staff 334 Sep 27 15:08 public/about-time/index.html -rw-rw-r-- 1 mdhender staff 527 Sep 27 15:08 public/index.html -rw-rw-r-- 1 mdhender staff 358 Sep 27 15:08 public/post/first-post/index.html -rw-rw-r-- 1 mdhender staff 0 Sep 27 15:08 public/post/index.html -rw-rw-r-- 1 mdhender staff 342 Sep 27 15:08 public/post/second-post/index.html Notice that the page wasn\u0026rsquo;t created at the top level. It was created in a sub-directory named \u0026lsquo;about-time/\u0026rsquo;. That name came from our slug. Hugo will use the slug to name the generated content. It\u0026rsquo;s a reasonable default, by the way, but we can learn a few things by fighting it for this file.\nOne other thing. Take a look at the home page.\n$ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;http://localhost:1313/post/theme/\u0026#34;\u0026gt;creating a new theme\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;http://localhost:1313/about-time/\u0026#34;\u0026gt;about\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;http://localhost:1313/post/second-post/\u0026#34;\u0026gt;second\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;http://localhost:1313/post/first-post/\u0026#34;\u0026gt;first\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;script\u0026gt;document.write(\u0026#39;\u0026lt;script src=\u0026#34;http://\u0026#39; + (location.host || \u0026#39;localhost\u0026#39;).split(\u0026#39;:\u0026#39;)[0] + \u0026#39;:1313/livereload.js?mindelay=10\u0026#34;\u0026gt;\u0026lt;/\u0026#39; + \u0026#39;script\u0026gt;\u0026#39;)\u0026lt;/script\u0026gt;\u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Notice that the \u0026ldquo;about\u0026rdquo; link is listed with the posts? That\u0026rsquo;s not desirable, so let\u0026rsquo;s change that first.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;posts\u0026lt;/h1\u0026gt; {{ range first 10 .Data.Pages }} {{ if eq .Type \u0026#34;post\u0026#34;}} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;h1\u0026gt;pages\u0026lt;/h1\u0026gt; {{ range .Data.Pages }} {{ if eq .Type \u0026#34;page\u0026#34; }} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq Generate the web site and verify the results. The home page has two sections, posts and pages, and each section has the right set of headings and links in it.\nBut, that about page still renders to about-time/index.html.\n$ find public -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-rw-r-- 1 mdhender staff 334 Sep 27 15:33 public/about-time/index.html -rw-rw-r-- 1 mdhender staff 645 Sep 27 15:33 public/index.html -rw-rw-r-- 1 mdhender staff 358 Sep 27 15:33 public/post/first-post/index.html -rw-rw-r-- 1 mdhender staff 0 Sep 27 15:33 public/post/index.html -rw-rw-r-- 1 mdhender staff 342 Sep 27 15:33 public/post/second-post/index.html Knowing that hugo is using the slug to generate the file name, the simplest solution is to change the slug. Let\u0026rsquo;s do it the hard way and change the permalink in the configuration file.\n$ vi config.toml [permalinks] page = \u0026#34;/:title/\u0026#34; about = \u0026#34;/:filename/\u0026#34; Generate the web site and verify that this didn\u0026rsquo;t work. Hugo lets \u0026ldquo;slug\u0026rdquo; or \u0026ldquo;URL\u0026rdquo; override the permalinks setting in the configuration file. Go ahead and comment out the slug in content/about.md, then generate the web site to get it to be created in the right place.\nSharing Templates # If you\u0026rsquo;ve been following along, you probably noticed that posts have titles in the browser and the home page doesn\u0026rsquo;t. That\u0026rsquo;s because we didn\u0026rsquo;t put the title in the home page\u0026rsquo;s template (layouts/index.html). That\u0026rsquo;s an easy thing to do, but let\u0026rsquo;s look at a different option.\nWe can put the common bits into a shared template that\u0026rsquo;s stored in the themes/zafta/layouts/partials/ directory.\nCreate the Header and Footer Partials # In Hugo, a partial is a sugar-coated template. Normally a template reference has a path specified. Partials are different. Hugo searches for them along a TODO defined search path. This makes it easier for end-users to override the theme\u0026rsquo;s presentation.\n$ vi themes/zafta/layouts/partials/header.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; :wq $ vi themes/zafta/layouts/partials/footer.html \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq Update the Home Page Template to Use the Partials # The most noticeable difference between a template call and a partials call is the lack of path:\n{{ template \u0026#34;theme/partials/header.html\u0026#34; . }} versus\n{{ partial \u0026#34;header.html\u0026#34; . }} Both pass in the context.\nLet\u0026rsquo;s change the home page template to use these new partials.\n$ vi themes/zafta/layouts/index.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;posts\u0026lt;/h1\u0026gt; {{ range first 10 .Data.Pages }} {{ if eq .Type \u0026#34;post\u0026#34;}} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;h1\u0026gt;pages\u0026lt;/h1\u0026gt; {{ range .Data.Pages }} {{ if or (eq .Type \u0026#34;page\u0026#34;) (eq .Type \u0026#34;about\u0026#34;) }} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Type }} - {{ .Title }} - {{ .RelPermalink }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} {{ partial \u0026#34;footer.html\u0026#34; . }} :wq Generate the web site and verify the results. The title on the home page is now \u0026ldquo;your title here\u0026rdquo;, which comes from the \u0026ldquo;title\u0026rdquo; variable in the config.toml file.\nUpdate the Default Single Template to Use the Partials # $ vi themes/zafta/layouts/_default/single.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} {{ partial \u0026#34;footer.html\u0026#34; . }} :wq Generate the web site and verify the results. The title on the posts and the about page should both reflect the value in the markdown file.\nAdd “Date Published” to Posts # It\u0026rsquo;s common to have posts display the date that they were written or published, so let\u0026rsquo;s add that. The front matter of our posts has a variable named \u0026ldquo;date.\u0026rdquo; It\u0026rsquo;s usually the date the content was created, but let\u0026rsquo;s pretend that\u0026rsquo;s the value we want to display.\nAdd “Date Published” to the Template # We\u0026rsquo;ll start by updating the template used to render the posts. The template code will look like:\n{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }} Posts use the default single template, so we\u0026rsquo;ll change that file.\n$ vi themes/zafta/layouts/_default/single.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }}\u0026lt;/h2\u0026gt; {{ .Content }} {{ partial \u0026#34;footer.html\u0026#34; . }} :wq Generate the web site and verify the results. The posts now have the date displayed in them. There\u0026rsquo;s a problem, though. The \u0026ldquo;about\u0026rdquo; page also has the date displayed.\nAs usual, there are a couple of ways to make the date display only on posts. We could do an \u0026ldquo;if\u0026rdquo; statement like we did on the home page. Another way would be to create a separate template for posts.\nThe \u0026ldquo;if\u0026rdquo; solution works for sites that have just a couple of content types. It aligns with the principle of \u0026ldquo;code for today,\u0026rdquo; too.\nLet\u0026rsquo;s assume, though, that we\u0026rsquo;ve made our site so complex that we feel we have to create a new template type. In Hugo-speak, we\u0026rsquo;re going to create a section template.\nLet\u0026rsquo;s restore the default single template before we forget.\n$ mkdir themes/zafta/layouts/post $ vi themes/zafta/layouts/_default/single.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} {{ partial \u0026#34;footer.html\u0026#34; . }} :wq Now we\u0026rsquo;ll update the post\u0026rsquo;s version of the single template. If you remember Hugo\u0026rsquo;s rules, the template engine will use this version over the default.\n$ vi themes/zafta/layouts/post/single.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }}\u0026lt;/h2\u0026gt; {{ .Content }} {{ partial \u0026#34;footer.html\u0026#34; . }} :wq Note that we removed the date logic from the default template and put it in the post template. Generate the web site and verify the results. Posts have dates and the about page doesn\u0026rsquo;t.\nDon\u0026rsquo;t Repeat Yourself # DRY is a good design goal and Hugo does a great job supporting it. Part of the art of a good template is knowing when to add a new template and when to update an existing one. While you\u0026rsquo;re figuring that out, accept that you\u0026rsquo;ll be doing some refactoring. Hugo makes that easy and fast, so it\u0026rsquo;s okay to delay splitting up a template.\n"},{"id":18,"href":"/docs/example/table-of-contents/","title":"Table of Contents","section":"Example Site","content":" Ubi loqui # Mentem genus facietque salire tempus bracchia # Lorem markdownum partu paterno Achillem. Habent amne generosi aderant ad pellem nec erat sustinet merces columque haec et, dixit minus nutrit accipiam subibis subdidit. Temeraria servatum agros qui sed fulva facta. Primum ultima, dedit, suo quisque linguae medentes fixo: tum petis.\nRapit vocant si hunc siste adspice # Ora precari Patraeque Neptunia, dixit Danae Cithaeron armaque maxima in nati Coniugis templis fluidove. Effugit usus nec ingreditur agmen ac manus conlato. Nullis vagis nequiquam vultibus aliquos altera suum venis teneas fretum. Armos remotis hoc sine ferrea iuncta quam!\nLocus fuit caecis # Nefas discordemque domino montes numen tum humili nexilibusque exit, Iove. Quae miror esse, scelerisque Melaneus viribus. Miseri laurus. Hoc est proposita me ante aliquid, aura inponere candidioribus quidque accendit bella, sumpta. Intravit quam erat figentem hunc, motus de fontes parvo tempestate.\niscsi_virus = pitch(json_in_on(eupViral), northbridge_services_troubleshooting, personal( firmware_rw.trash_rw_crm.device(interactive_gopher_personal, software, -1), megabit, ergonomicsSoftware(cmyk_usb_panel, mips_whitelist_duplex, cpa))); if (5) { managementNetwork += dma - boolean; kilohertz_token = 2; honeypot_affiliate_ergonomics = fiber; } mouseNorthbridge = byte(nybble_xmp_modem.horse_subnet( analogThroughputService * graphicPoint, drop(daw_bit, dnsIntranet), gateway_ospf), repository.domain_key.mouse(serverData(fileNetwork, trim_duplex_file), cellTapeDirect, token_tooltip_mashup( ripcordingMashup))); module_it = honeypot_driver(client_cold_dvr(593902, ripping_frequency) + coreLog.joystick(componentUdpLink), windows_expansion_touchscreen); bashGigabit.external.reality(2, server_hardware_codec.flops.ebookSampling( ciscNavigationBacklink, table + cleanDriver), indexProtocolIsp); Placabilis coactis nega ingemuit ignoscat nimia non # Frontis turba. Oculi gravis est Delphice; inque praedaque sanguine manu non.\nif (ad_api) { zif += usb.tiffAvatarRate(subnet, digital_rt) + exploitDrive; gigaflops(2 - bluetooth, edi_asp_memory.gopher(queryCursor, laptop), panel_point_firmware); spyware_bash.statePopApplet = express_netbios_digital( insertion_troubleshooting.brouter(recordFolderUs), 65); } recursionCoreRay = -5; if (hub == non) { portBoxVirus = soundWeb(recursive_card(rwTechnologyLeopard), font_radcab, guidCmsScalable + reciprocalMatrixPim); left.bug = screenshot; } else { tooltipOpacity = raw_process_permalink(webcamFontUser, -1); executable_router += tape; } if (tft) { bandwidthWeb *= social_page; } else { regular += 611883; thumbnail /= system_lag_keyboard; } Caesorum illa tu sentit micat vestes papyriferi # Inde aderam facti; Theseus vis de tauri illa peream. Oculos uberaque non regisque vobis cursuque, opus venit quam vulnera. Et maiora necemque, lege modo; gestanda nitidi, vero? Dum ne pectoraque testantur.\nVenasque repulsa Samos qui, exspectatum eram animosque hinc, aut manes, Assyrii. Cupiens auctoribus pariter rubet, profana magni super nocens. Vos ius sibilat inpar turba visae iusto! Sedes ante dum superest extrema.\n"},{"id":19,"href":"/posts/hugoisforlovers/","title":"Getting Started with Hugo","section":"Blog","content":" Step 1. Install Hugo # Go to Hugo releases and download the appropriate version for your OS and architecture.\nSave it somewhere specific as we will be using it in the next step.\nMore complete instructions are available at Install Hugo\nStep 2. Build the Docs # Hugo has its own example site which happens to also be the documentation site you are reading right now.\nFollow the following steps:\nClone the Hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313 Corresponding pseudo commands:\ngit clone https://github.com/spf13/hugo cd hugo /path/to/where/you/installed/hugo server --source=./docs \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 27 ms \u0026gt; Web Server is available at http://localhost:1313 \u0026gt; Press ctrl+c to stop Once you\u0026rsquo;ve gotten here, follow along the rest of this page on your local build.\nStep 3. Change the docs site # Stop the Hugo process by hitting Ctrl+C.\nNow we are going to run hugo again, but this time with hugo in watch mode.\n/path/to/hugo/from/step/1/hugo server --source=./docs --watch \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 27 ms \u0026gt; Web Server is available at http://localhost:1313 \u0026gt; Watching for changes in /Users/spf13/Code/hugo/docs/content \u0026gt; Press ctrl+c to stop Open your favorite editor and change one of the source content pages. How about changing this very file to fix the typo. How about changing this very file to fix the typo.\nContent files are found in docs/content/. Unless otherwise specified, files are located at the same relative location as the url, in our case docs/content/overview/quickstart.md.\nChange and save this file.. Notice what happened in your terminal.\n\u0026gt; Change detected, rebuilding site \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 26 ms Refresh the browser and observe that the typo is now fixed.\nNotice how quick that was. Try to refresh the site before it\u0026rsquo;s finished building. I double dare you. Having nearly instant feedback enables you to have your creativity flow without waiting for long builds.\nStep 4. Have fun # The best way to learn something is to play with it.\n"},{"id":20,"href":"/docs/example/Ch8.%E5%8D%A1%E7%89%87%E9%98%85%E8%AF%BB/%E5%A6%82%E4%BD%95%E6%92%B0%E5%86%99%E6%96%B0%E7%9F%A5%E5%8D%A1/","title":"如何撰写新知卡","section":"Ch8.卡片阅读","content":" 1 # 理解新知卡的结构我们用下图就能简单理解：\n如上图所示，新知卡撰写分三步：第一步，说明旧知；第二步，引出新知；第三步，列出例子。\n2 # 我们先看第一步。\n什么是「旧知」？\n简单来说可以理解为你在阅读之前大脑中认可的的知识。比如：\n在阅读层面：\n我们往往在阅读时对重要的句子划线。 在育儿层面：\n我们往往通过奖励的方式来触发希望孩子产生某些行为。 在睡眠层面：\n我们往往认为自己每天要睡足8小时。 ……\n以上这些想法，大概率就属于我们曾经或者当下所拥有的某些认知，因为我们认同它，所以我们就自动化了相关的行为。\n所以理解「旧知」可以从三个层面来理解：\n我们对这个知识是认同的 因为我们认同它，所以我们自然按照这个知识去行动、行动、行动。 因为我们反复行动，所以就会认为这个知识是理所当然的正确。 换句话说，这里的「旧知」，可以视为我们过去所认可并执行的「常识」。\n在撰写卡片时，经常会使用类似的句式：\n过去我常常认为……\n过去我常常会……\n人们常常……\n针对前面提出的一个案例，我在「新知」模块，就可以这样写：\n#新知卡\n标题：阅读的标记行为\n新知：\n我过去往往觉得读书时通过不同颜色的笔在书上涂色、标记会加深对知识的理解，类如这样：\n这种操作会非常简单且自动化。\n可以看到，在这新知卡的「新知」模块， 首先用一句话概述了一个阅读常识，其次还附了一张图来作为示例以增加说服力。\n3 # 而既然是常识，参考我们前面提供新知卡结构，在第二步就需要列出这个常识的反向认知，这就来到了新知卡的第二个重点模块 —— 「新知」。\n「新知」的「新」体现体现在何处呢？\n它一共体现在两点：\n首先，它与「新」的字面含义相符，是通过阅读时刚刚了解到的全新知识。\n其次，这个全新知识挑战或颠覆了我们大脑中已有的旧知，也即我们理所当然认为正确的常识。\n那么，在具体撰写过程中，如何将这两点强化呢？\n第一，我们需要写清楚这个反常识的源头，即这个反常识的理论是由谁提出来的。\n第二，我们需要将这个反常识用自己的话说清楚。\n依然以前面的阅读标记为例，在「新知」模块，我是这样写的：\n而加州大学洛杉矶分校 “学习和遗忘实验室” 主任，罗伯特 · 比约克（Robert A. Bjork）提出了「必要难度」（Desirable difficulty）的学习理论，他指出相对比顺畅的学习过程，主动让学习过程更加困难，能帮助大脑形成更强的记忆。\n从上述描述可以看到，在「旧知」模块，强调了阅读时的划线动作执行起来会「简单」，而在「新知」模块，引出了主动让学习更加「困难」的反向理解，这就整体上呈现了一个认知反差；除此之外，还特别明确了新知由罗伯特 · 比约克教授提出，这就强调了新知的源头。\n4 # 而接下来，我们就来到新知卡的最后一个模块 —— 例子模块。这里的例子有一个重要特征在于它往往是鲜活、具象的。所以提供的例子就呈现这样的优先级：自己的亲身体验 ＞ 自己的观察分析 ＞ 第三方提供的案例。所以一般而言，我们往往采用自己亲身经历过的案例。但是这里往往会遇到一个问题：\n我们一旦发现了反常识的新知后，有可能过往经历过类似案例，也有可能从未经历过或者尚未回想起来。如果是前者，自然可以列出自己的案例；而如果是后者，举一个例子就会变得比较困难，而在这个时候，我们可以换一种方式，即对第一个环节的「旧知」以新知的维度进行重新理解。\n依然以前面提到的阅读笔记新知卡为例，在第三个环节时，假设我并未体验过「阅读时不划线带来的正面效应」（可能我从未经历过），这时候我就可以以「必要难度」这个新知对我之前的行为进行分析：\n而回想我过去阅读时用笔划线或者作各种颜色标注的行为，看似是对阅读内容的重视，其实这种流畅动作会对大脑形成知识正在被学习的错觉，让大脑觉得这些内容即便记不住也没关系，因为划线了后面可以再复习，导致大脑更少对划线内容进行更深入思考。\n不仅如此，在对已经标记的阅读材料进行未来的复习时，这种标记可能进一步加剧了复习的流畅性，即重复阅读时带来的易读感，进而产生对标记内容已经了解而不会对其进行深度加工的错觉。\n到这里，这张新知卡的三个模块基本已经撰写完毕，完整版如下：\n到这里我们发现， 如果要把新知卡写好，有三个注意事项：\n理解新知卡的结构（旧知 - 新知 - 例子） 找到新知的源头（人、概念或原理） 对新知的佐证或者对旧知的重新理解。 当然，如果要对新知卡的内容进行更详细的解析，我们可以引入其他的卡，比如对于什么是「必要难度」，我们可以尝试写一张术语卡；对于如何更好理解阅读划线的影响，我们可以写一张图示卡等等。\n"},{"id":21,"href":"/docs/example/hidden/","title":"Hidden","section":"Example Site","content":" This page is hidden in menu # Quondam non pater est dignior ille Eurotas # Latent te facies # Lorem markdownum arma ignoscas vocavit quoque ille texit mandata mentis ultimus, frementes, qui in vel. Hippotades Peleus pennas conscia cuiquam Caeneus quas.\nPater demittere evincitque reddunt Maxime adhuc pressit huc Danaas quid freta Soror ego Luctus linguam saxa ultroque prior Tatiumque inquit Saepe liquitur subita superata dederat Anius sudor Cum honorum Latona # O fallor in sustinui iussorum equidem. Nymphae operi oris alii fronde parens dumque, in auro ait mox ingenti proxima iamdudum maius?\nreality(burnDocking(apache_nanometer), pad.property_data_programming.sectorBrowserPpga(dataMask, 37, recycleRup)); intellectualVaporwareUser += -5 * 4; traceroute_key_upnp /= lag_optical(android.smb(thyristorTftp)); surge_host_golden = mca_compact_device(dual_dpi_opengl, 33, commerce_add_ppc); if (lun_ipv) { verticalExtranet(1, thumbnail_ttl, 3); bar_graphics_jpeg(chipset - sector_xmp_beta); } Fronde cetera dextrae sequens pennis voce muneris # Acta cretus diem restet utque; move integer, oscula non inspirat, noctisque scelus! Nantemque in suas vobis quamvis, et labori!\nvar runtimeDiskCompiler = home - array_ad_software; if (internic \u0026gt; disk) { emoticonLockCron += 37 + bps - 4; wan_ansi_honeypot.cardGigaflops = artificialStorageCgi; simplex -= downloadAccess; } var volumeHardeningAndroid = pixel + tftp + onProcessorUnmount; sector(memory(firewire + interlaced, wired)); "},{"id":22,"href":"/docs/shortcodes/buttons/","title":"Buttons","section":"Shortcodes","content":" Buttons # Buttons are styled links that can lead to local page or external link.\nExample # {{\u0026lt; button relref=\u0026#34;/\u0026#34; [class=\u0026#34;...\u0026#34;] \u0026gt;}}Get Home{{\u0026lt; /button \u0026gt;}} {{\u0026lt; button href=\u0026#34;https://github.com/alex-shpak/hugo-book\u0026#34; \u0026gt;}}Contribute{{\u0026lt; /button \u0026gt;}} Get Home Contribute "},{"id":23,"href":"/docs/shortcodes/columns/","title":"Columns","section":"Shortcodes","content":" Columns # Columns help organize shorter pieces of content horizontally for readability.\n{{\u0026lt; columns \u0026gt;}} \u0026lt;!-- begin columns block --\u0026gt; # Left Content Lorem markdownum insigne... \u0026lt;---\u0026gt; \u0026lt;!-- magic separator, between columns --\u0026gt; # Mid Content Lorem markdownum insigne... \u0026lt;---\u0026gt; \u0026lt;!-- magic separator, between columns --\u0026gt; # Right Content Lorem markdownum insigne... {{\u0026lt; /columns \u0026gt;}} Example # Left Content # Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\nMid Content # Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter!\nRight Content # Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\n"},{"id":24,"href":"/docs/shortcodes/details/","title":"Details","section":"Shortcodes","content":" Details # Details shortcode is a helper for details html5 element. It is going to replace expand shortcode.\nExample # {{\u0026lt; details \u0026#34;Title\u0026#34; [open] \u0026gt;}} ## Markdown content Lorem markdownum insigne... {{\u0026lt; /details \u0026gt;}} {{\u0026lt; details title=\u0026#34;Title\u0026#34; open=true \u0026gt;}} ## Markdown content Lorem markdownum insigne... {{\u0026lt; /details \u0026gt;}} Title Markdown content # Lorem markdownum insigne\u0026hellip;\n"},{"id":25,"href":"/docs/shortcodes/expand/","title":"Expand","section":"Shortcodes","content":" Expand # Expand shortcode can help to decrease clutter on screen by hiding part of text. Expand content by clicking on it.\nExample # Default # {{\u0026lt; details \u0026gt;}} ## Markdown content Lorem markdownum insigne... {{\u0026lt; /details \u0026gt;}} Markdown content # Lorem markdownum insigne\u0026hellip;\nWith Custom Label # {{\u0026lt; details \u0026#34;Custom Label\u0026#34; \u0026#34;...\u0026#34; \u0026gt;}} ## Markdown content Lorem markdownum insigne... {{\u0026lt; /details \u0026gt;}} Custom Label Markdown content # Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\n"},{"id":26,"href":"/docs/shortcodes/hints/","title":"Hints","section":"Shortcodes","content":" Hints # Hint shortcode can be used as hint/alerts/notification block.\nThere are 3 colors to choose: info, warning and danger.\n{{\u0026lt; hint [info|warning|danger] \u0026gt;}} **Markdown content** Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa {{\u0026lt; /hint \u0026gt;}} Example # Markdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa Markdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa Markdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa "},{"id":27,"href":"/docs/shortcodes/mermaid/","title":"Mermaid","section":"Shortcodes","content":" Mermaid Chart # MermaidJS is library for generating svg charts and diagrams from text.\nOverride Mermaid Initialization Config\nTo override the initialization config for Mermaid, create a mermaid.json file in your assets folder!\nExample # {{\u0026lt;/* mermaid [class=\u0026#34;text-center\u0026#34;]*/\u0026gt;}} stateDiagram-v2 State1: The state with a note note right of State1 Important information! You can write notes. end note State1 --\u0026gt; State2 note left of State2 : This is the note to the left. {{\u0026lt;/* /mermaid */\u0026gt;}} stateDiagram-v2 State1: The state with a note note right of State1 Important information! You can write notes. end note State1 --\u003e State2 note left of State2 : This is the note to the left. "},{"id":28,"href":"/docs/shortcodes/section/","title":"Section","section":"Shortcodes","content":" Section # Section renders pages in section as definition list, using title and description. Optional param summary can be used to show or hide page summary\nExample # {{\u0026lt; section [summary] \u0026gt;}} First Page First page # Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Second Page Second Page # Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. "},{"id":29,"href":"/docs/shortcodes/section/first-page/","title":"First Page","section":"Section","content":" First page # Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n"},{"id":30,"href":"/docs/shortcodes/section/second-page/","title":"Second Page","section":"Section","content":" Second Page # Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n"},{"id":31,"href":"/docs/shortcodes/tabs/","title":"Tabs","section":"Shortcodes","content":" Tabs # Tabs let you organize content by context, for example installation instructions for each supported platform.\n{{\u0026lt; tabs \u0026#34;uniqueid\u0026#34; \u0026gt;}} {{\u0026lt; tab \u0026#34;MacOS\u0026#34; \u0026gt;}} # MacOS Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; tab \u0026#34;Linux\u0026#34; \u0026gt;}} # Linux Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; tab \u0026#34;Windows\u0026#34; \u0026gt;}} # Windows Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; /tabs \u0026gt;}} Example # MacOS MacOS # This is tab MacOS content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\nLinux Linux # This is tab Linux content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\nWindows Windows # This is tab Windows content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\n"},{"id":32,"href":"/docs/shortcodes/katex/","title":"KaTeX","section":"Shortcodes","content":" KaTeX # KaTeX shortcode let you render math typesetting in markdown document. See KaTeX\nExample # {{\u0026lt;/* katex [display] [class=\u0026#34;text-center\u0026#34;] */\u0026gt;}} f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi {{\u0026lt;/* /katex */\u0026gt;}} \\[f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi\\] Display Mode Example # Here is some inline example: \\(\\pi(x)\\) , rendered in the same line. And below is display example, having display: block \\[f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi\\] Text continues here.\n"}]